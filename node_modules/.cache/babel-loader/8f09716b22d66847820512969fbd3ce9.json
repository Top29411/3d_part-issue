{"ast":null,"code":"import _slicedToArray from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/src/canvas/components/Wolf.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport { useLoader, useThree } from \"react-three-fiber\";\nimport { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Wolf = function Wolf(_ref) {\n  _s();\n\n  var newMaterialOpt = _ref.newMaterialOpt;\n\n  var _useThree = useThree(),\n      camera = _useThree.camera;\n\n  var theModel = useLoader(FBXLoader, \"/wolf/model.fbx\");\n\n  var _useLoader = useLoader(TextureLoader, [\"/wolf/color.png\", \"/wolf/normal.png\", \"/wolf/roughness.png\", \"/wolf/metalic.png\"]),\n      _useLoader2 = _slicedToArray(_useLoader, 4),\n      colorMap = _useLoader2[0],\n      normalMap = _useLoader2[1],\n      roughnessMap = _useLoader2[2],\n      metalnessMap = _useLoader2[3];\n\n  var modelRef = useRef(null);\n  useEffect(function () {\n    if (theModel) {\n      console.log(\"1\", theModel);\n      console.log(\"11\", theModel === null || theModel === void 0 ? void 0 : theModel.children[0].geometry);\n      console.log(\"2\", modelRef.current);\n    }\n  }, [theModel]);\n  return (\n    /*#__PURE__*/\n    // <primitive\n    //   ref={modelRef}\n    //   object={theModel}\n    //   scale={[0.1, 0.1, 0.1]}\n    //   rotation={[0, Math.PI, 0]}\n    //   position={[0, -1, 0]}\n    //   receiveShadow\n    //   castShadow\n    // />\n    _jsxDEV(\"group\", {\n      rotation: [0, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n        ref: modelRef,\n        geometry: theModel === null || theModel === void 0 ? void 0 : theModel.children[0].geometry,\n        scale: [0.001, 0.001, 0.001],\n        rotation: [0, 1, 0],\n        children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n          map: colorMap,\n          normalMap: normalMap,\n          roughnessMap: roughnessMap,\n          metalnessMap: metalnessMap,\n          attachArray: \"material\" // alphaMap={theModel?.children[0].material.alphaMap}\n          ,\n          metalness: 1,\n          roughness: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n        position: [0, 0, -1],\n        children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n          args: [1, 1, 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n          color: \"#BADA55\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, _this)\n  );\n};\n\n_s(Wolf, \"92+d7zVIfP6hk3Aqo9QOWY1g0z8=\", false, function () {\n  return [useThree, useLoader, useLoader];\n});\n\n_c = Wolf;\nexport default Wolf;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wolf\");","map":{"version":3,"names":["React","FBXLoader","TextureLoader","useLoader","useThree","useRef","useEffect","Wolf","newMaterialOpt","camera","theModel","colorMap","normalMap","roughnessMap","metalnessMap","modelRef","console","log","children","geometry","current"],"sources":["/Users/pavlomishchenko/Downloads/fbx-app-react-forked/src/canvas/components/Wolf.jsx"],"sourcesContent":["import React from \"react\";\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport {useLoader, useThree} from \"react-three-fiber\";\nimport { useRef, useEffect } from \"react\";\n\nconst Wolf = ({ newMaterialOpt }) => {\n    const {\n        camera,\n    } = useThree();\n\n    const theModel = useLoader(FBXLoader, \"/wolf/model.fbx\");\n    const [colorMap,normalMap,roughnessMap, metalnessMap] = useLoader(TextureLoader, [\n        \"/wolf/color.png\",\n        \"/wolf/normal.png\",\n        \"/wolf/roughness.png\",\n        \"/wolf/metalic.png\",\n    ]);\n    const modelRef = useRef(null);\n\n    useEffect(() => {\n        if (theModel) {\n            console.log(\"1\", theModel);\n            console.log(\"11\", theModel?.children[0].geometry);\n            console.log(\"2\", modelRef.current);\n        }\n    }, [theModel]);\n\n    return (\n        // <primitive\n        //   ref={modelRef}\n        //   object={theModel}\n        //   scale={[0.1, 0.1, 0.1]}\n        //   rotation={[0, Math.PI, 0]}\n        //   position={[0, -1, 0]}\n        //   receiveShadow\n        //   castShadow\n        // />\n        <group rotation={[0,0,0]}>\n            <mesh\n                ref={modelRef}\n                geometry={theModel?.children[0].geometry}\n                scale={[0.001, 0.001, 0.001]}\n                rotation={[0,1,0]}\n            >\n                <meshPhongMaterial\n                    map={colorMap}\n                    normalMap={normalMap}\n                    roughnessMap={roughnessMap}\n                    metalnessMap={metalnessMap}\n                    attachArray=\"material\"\n                    // alphaMap={theModel?.children[0].material.alphaMap}\n                    metalness={1}\n                    roughness={1}\n                />\n            </mesh>\n            <mesh position={[0, 0, -1]}>\n                <boxGeometry args={[1, 1, 1]} />\n                <meshStandardMaterial color='#BADA55' />\n            </mesh>\n        </group>\n    );\n};\n\nexport default Wolf;"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,sCAA1B;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,mBAAlC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAwB;EAAA;;EAAA,IAArBC,cAAqB,QAArBA,cAAqB;;EACjC,gBAEIJ,QAAQ,EAFZ;EAAA,IACIK,MADJ,aACIA,MADJ;;EAIA,IAAMC,QAAQ,GAAGP,SAAS,CAACF,SAAD,EAAY,iBAAZ,CAA1B;;EACA,iBAAwDE,SAAS,CAACD,aAAD,EAAgB,CAC7E,iBAD6E,EAE7E,kBAF6E,EAG7E,qBAH6E,EAI7E,mBAJ6E,CAAhB,CAAjE;EAAA;EAAA,IAAOS,QAAP;EAAA,IAAgBC,SAAhB;EAAA,IAA0BC,YAA1B;EAAA,IAAwCC,YAAxC;;EAMA,IAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAD,CAAvB;EAEAC,SAAS,CAAC,YAAM;IACZ,IAAII,QAAJ,EAAc;MACVM,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBP,QAAjB;MACAM,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBP,QAAlB,aAAkBA,QAAlB,uBAAkBA,QAAQ,CAAEQ,QAAV,CAAmB,CAAnB,EAAsBC,QAAxC;MACAH,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBF,QAAQ,CAACK,OAA1B;IACH;EACJ,CANQ,EAMN,CAACV,QAAD,CANM,CAAT;EAQA;IAAA;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MAAO,QAAQ,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAjB;MAAA,wBACI;QACI,GAAG,EAAEK,QADT;QAEI,QAAQ,EAAEL,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEQ,QAAV,CAAmB,CAAnB,EAAsBC,QAFpC;QAGI,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAHX;QAII,QAAQ,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJd;QAAA,uBAMI;UACI,GAAG,EAAER,QADT;UAEI,SAAS,EAAEC,SAFf;UAGI,YAAY,EAAEC,YAHlB;UAII,YAAY,EAAEC,YAJlB;UAKI,WAAW,EAAC,UALhB,CAMI;UANJ;UAOI,SAAS,EAAE,CAPf;UAQI,SAAS,EAAE;QARf;UAAA;UAAA;UAAA;QAAA;MANJ;QAAA;QAAA;QAAA;MAAA,SADJ,eAkBI;QAAM,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAAhB;QAAA,wBACI;UAAa,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;QAAnB;UAAA;UAAA;UAAA;QAAA,SADJ,eAEI;UAAsB,KAAK,EAAC;QAA5B;UAAA;UAAA;UAAA;QAAA,SAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,SAlBJ;IAAA;MAAA;MAAA;MAAA;IAAA;EAVJ;AAkCH,CAxDD;;GAAMP,I;UAGEH,Q,EAEaD,S,EACuCA,S;;;KANtDI,I;AA0DN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}