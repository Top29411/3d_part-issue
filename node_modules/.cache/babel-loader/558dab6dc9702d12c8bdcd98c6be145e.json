{"ast":null,"code":"import _classCallCheck from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Vector4 } from 'three';\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\nvar NURBSUtils = /*#__PURE__*/function () {\n  function NURBSUtils() {\n    _classCallCheck(this, NURBSUtils);\n  }\n\n  _createClass(NURBSUtils, null, [{\n    key: \"findSpan\",\n    value:\n    /*\n    Finds knot vector span.\n    \tp : degree\n    u : parametric value\n    U : knot vector\n    \treturns the span\n    */\n    function findSpan(p, u, U) {\n      var n = U.length - p - 1;\n\n      if (u >= U[n]) {\n        return n - 1;\n      }\n\n      if (u <= U[p]) {\n        return p;\n      }\n\n      var low = p;\n      var high = n;\n      var mid = Math.floor((low + high) / 2);\n\n      while (u < U[mid] || u >= U[mid + 1]) {\n        if (u < U[mid]) {\n          high = mid;\n        } else {\n          low = mid;\n        }\n\n        mid = Math.floor((low + high) / 2);\n      }\n\n      return mid;\n    }\n    /*\n    Calculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n    \tspan : span in which u lies\n    u    : parametric point\n    p    : degree\n    U    : knot vector\n    \treturns array[p+1] with basis functions values.\n    */\n\n  }, {\n    key: \"calcBasisFunctions\",\n    value: function calcBasisFunctions(span, u, p, U) {\n      var N = [];\n      var left = [];\n      var right = [];\n      N[0] = 1.0;\n\n      for (var j = 1; j <= p; ++j) {\n        left[j] = u - U[span + 1 - j];\n        right[j] = U[span + j] - u;\n        var saved = 0.0;\n\n        for (var r = 0; r < j; ++r) {\n          var rv = right[r + 1];\n          var lv = left[j - r];\n          var temp = N[r] / (rv + lv);\n          N[r] = saved + rv * temp;\n          saved = lv * temp;\n        }\n\n        N[j] = saved;\n      }\n\n      return N;\n    }\n    /*\n    Calculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n    \tp : degree of B-Spline\n    U : knot vector\n    P : control points (x, y, z, w)\n    u : parametric point\n    \treturns point for given u\n    */\n\n  }, {\n    key: \"calcBSplinePoint\",\n    value: function calcBSplinePoint(p, U, P, u) {\n      var span = this.findSpan(p, u, U);\n      var N = this.calcBasisFunctions(span, u, p, U);\n      var C = new Vector4(0, 0, 0, 0);\n\n      for (var j = 0; j <= p; ++j) {\n        var point = P[span - p + j];\n        var Nj = N[j];\n        var wNj = point.w * Nj;\n        C.x += point.x * wNj;\n        C.y += point.y * wNj;\n        C.z += point.z * wNj;\n        C.w += point.w * Nj;\n      }\n\n      return C;\n    }\n    /*\n    Calculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n    \tspan : span in which u lies\n    u    : parametric point\n    p    : degree\n    n    : number of derivatives to calculate\n    U    : knot vector\n    \treturns array[n+1][p+1] with basis functions derivatives\n    */\n\n  }, {\n    key: \"calcBasisFunctionDerivatives\",\n    value: function calcBasisFunctionDerivatives(span, u, p, n, U) {\n      var zeroArr = [];\n\n      for (var i = 0; i <= p; ++i) {\n        zeroArr[i] = 0.0;\n      }\n\n      var ders = [];\n\n      for (var _i = 0; _i <= n; ++_i) {\n        ders[_i] = zeroArr.slice(0);\n      }\n\n      var ndu = [];\n\n      for (var _i2 = 0; _i2 <= p; ++_i2) {\n        ndu[_i2] = zeroArr.slice(0);\n      }\n\n      ndu[0][0] = 1.0;\n      var left = zeroArr.slice(0);\n      var right = zeroArr.slice(0);\n\n      for (var j = 1; j <= p; ++j) {\n        left[j] = u - U[span + 1 - j];\n        right[j] = U[span + j] - u;\n        var saved = 0.0;\n\n        for (var _r = 0; _r < j; ++_r) {\n          var rv = right[_r + 1];\n          var lv = left[j - _r];\n          ndu[j][_r] = rv + lv;\n          var temp = ndu[_r][j - 1] / ndu[j][_r];\n          ndu[_r][j] = saved + rv * temp;\n          saved = lv * temp;\n        }\n\n        ndu[j][j] = saved;\n      }\n\n      for (var _j = 0; _j <= p; ++_j) {\n        ders[0][_j] = ndu[_j][p];\n      }\n\n      for (var _r2 = 0; _r2 <= p; ++_r2) {\n        var s1 = 0;\n        var s2 = 1;\n        var a = [];\n\n        for (var _i3 = 0; _i3 <= p; ++_i3) {\n          a[_i3] = zeroArr.slice(0);\n        }\n\n        a[0][0] = 1.0;\n\n        for (var k = 1; k <= n; ++k) {\n          var d = 0.0;\n          var rk = _r2 - k;\n          var pk = p - k;\n\n          if (_r2 >= k) {\n            a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n            d = a[s2][0] * ndu[rk][pk];\n          }\n\n          var j1 = rk >= -1 ? 1 : -rk;\n          var j2 = _r2 - 1 <= pk ? k - 1 : p - _r2;\n\n          for (var _j3 = j1; _j3 <= j2; ++_j3) {\n            a[s2][_j3] = (a[s1][_j3] - a[s1][_j3 - 1]) / ndu[pk + 1][rk + _j3];\n            d += a[s2][_j3] * ndu[rk + _j3][pk];\n          }\n\n          if (_r2 <= pk) {\n            a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][_r2];\n            d += a[s2][k] * ndu[_r2][pk];\n          }\n\n          ders[k][_r2] = d;\n          var _j2 = s1;\n          s1 = s2;\n          s2 = _j2;\n        }\n      }\n\n      var r = p;\n\n      for (var _k = 1; _k <= n; ++_k) {\n        for (var _j4 = 0; _j4 <= p; ++_j4) {\n          ders[_k][_j4] *= r;\n        }\n\n        r *= p - _k;\n      }\n\n      return ders;\n    }\n    /*\n    \tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n    \t\tp  : degree\n    \tU  : knot vector\n    \tP  : control points\n    \tu  : Parametric points\n    \tnd : number of derivatives\n    \t\treturns array[d+1] with derivatives\n    \t*/\n\n  }, {\n    key: \"calcBSplineDerivatives\",\n    value: function calcBSplineDerivatives(p, U, P, u, nd) {\n      var du = nd < p ? nd : p;\n      var CK = [];\n      var span = this.findSpan(p, u, U);\n      var nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);\n      var Pw = [];\n\n      for (var i = 0; i < P.length; ++i) {\n        var point = P[i].clone();\n        var w = point.w;\n        point.x *= w;\n        point.y *= w;\n        point.z *= w;\n        Pw[i] = point;\n      }\n\n      for (var k = 0; k <= du; ++k) {\n        var _point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n\n        for (var j = 1; j <= p; ++j) {\n          _point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n        }\n\n        CK[k] = _point;\n      }\n\n      for (var _k2 = du + 1; _k2 <= nd + 1; ++_k2) {\n        CK[_k2] = new Vector4(0, 0, 0);\n      }\n\n      return CK;\n    }\n    /*\n    Calculate \"K over I\"\n    \treturns k!/(i!(k-i)!)\n    */\n\n  }, {\n    key: \"calcKoverI\",\n    value: function calcKoverI(k, i) {\n      var nom = 1;\n\n      for (var j = 2; j <= k; ++j) {\n        nom *= j;\n      }\n\n      var denom = 1;\n\n      for (var _j5 = 2; _j5 <= i; ++_j5) {\n        denom *= _j5;\n      }\n\n      for (var _j6 = 2; _j6 <= k - i; ++_j6) {\n        denom *= _j6;\n      }\n\n      return nom / denom;\n    }\n    /*\n    Calculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n    \tPders : result of function calcBSplineDerivatives\n    \treturns array with derivatives for rational curve.\n    */\n\n  }, {\n    key: \"calcRationalCurveDerivatives\",\n    value: function calcRationalCurveDerivatives(Pders) {\n      var nd = Pders.length;\n      var Aders = [];\n      var wders = [];\n\n      for (var i = 0; i < nd; ++i) {\n        var point = Pders[i];\n        Aders[i] = new Vector3(point.x, point.y, point.z);\n        wders[i] = point.w;\n      }\n\n      var CK = [];\n\n      for (var k = 0; k < nd; ++k) {\n        var v = Aders[k].clone();\n\n        for (var _i4 = 1; _i4 <= k; ++_i4) {\n          v.sub(CK[k - _i4].clone().multiplyScalar(this.calcKoverI(k, _i4) * wders[_i4]));\n        }\n\n        CK[k] = v.divideScalar(wders[0]);\n      }\n\n      return CK;\n    }\n    /*\n    Calculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n    \tp  : degree\n    U  : knot vector\n    P  : control points in homogeneous space\n    u  : parametric points\n    nd : number of derivatives\n    \treturns array with derivatives.\n    */\n\n  }, {\n    key: \"calcNURBSDerivatives\",\n    value: function calcNURBSDerivatives(p, U, P, u, nd) {\n      var Pders = this.calcBSplineDerivatives(p, U, P, u, nd);\n      return this.calcRationalCurveDerivatives(Pders);\n    }\n    /*\n    Calculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n    \tp1, p2 : degrees of B-Spline surface\n    U1, U2 : knot vectors\n    P      : control points (x, y, z, w)\n    u, v   : parametric values\n    \treturns point for given (u, v)\n    */\n\n  }, {\n    key: \"calcSurfacePoint\",\n    value: function calcSurfacePoint(p, q, U, V, P, u, v, target) {\n      var uspan = this.findSpan(p, u, U);\n      var vspan = this.findSpan(q, v, V);\n      var Nu = this.calcBasisFunctions(uspan, u, p, U);\n      var Nv = this.calcBasisFunctions(vspan, v, q, V);\n      var temp = [];\n\n      for (var l = 0; l <= q; ++l) {\n        temp[l] = new Vector4(0, 0, 0, 0);\n\n        for (var k = 0; k <= p; ++k) {\n          var point = P[uspan - p + k][vspan - q + l].clone();\n          var w = point.w;\n          point.x *= w;\n          point.y *= w;\n          point.z *= w;\n          temp[l].add(point.multiplyScalar(Nu[k]));\n        }\n      }\n\n      var Sw = new Vector4(0, 0, 0, 0);\n\n      for (var _l = 0; _l <= q; ++_l) {\n        Sw.add(temp[_l].multiplyScalar(Nv[_l]));\n      }\n\n      Sw.divideScalar(Sw.w);\n      target.set(Sw.x, Sw.y, Sw.z);\n    }\n  }]);\n\n  return NURBSUtils;\n}();\n\nexport { NURBSUtils };","map":{"version":3,"names":["Vector3","Vector4","NURBSUtils","p","u","U","n","length","low","high","mid","Math","floor","span","N","left","right","j","saved","r","rv","lv","temp","P","findSpan","calcBasisFunctions","C","point","Nj","wNj","w","x","y","z","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j1","j2","nd","du","CK","nders","calcBasisFunctionDerivatives","Pw","clone","multiplyScalar","add","nom","denom","Pders","Aders","wders","v","sub","calcKoverI","divideScalar","calcBSplineDerivatives","calcRationalCurveDerivatives","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"sources":["/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/three/examples/jsm/curves/NURBSUtils.js"],"sourcesContent":["import {\n\tVector3,\n\tVector4\n} from 'three';\n\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\nclass NURBSUtils {\n\n\t/*\n\tFinds knot vector span.\n\n\tp : degree\n\tu : parametric value\n\tU : knot vector\n\n\treturns the span\n\t*/\n\tstatic findSpan( p, u, U ) {\n\n\t\tconst n = U.length - p - 1;\n\n\t\tif ( u >= U[ n ] ) {\n\n\t\t\treturn n - 1;\n\n\t\t}\n\n\t\tif ( u <= U[ p ] ) {\n\n\t\t\treturn p;\n\n\t\t}\n\n\t\tlet low = p;\n\t\tlet high = n;\n\t\tlet mid = Math.floor( ( low + high ) / 2 );\n\n\t\twhile ( u < U[ mid ] || u >= U[ mid + 1 ] ) {\n\n\t\t\tif ( u < U[ mid ] ) {\n\n\t\t\t\thigh = mid;\n\n\t\t\t} else {\n\n\t\t\t\tlow = mid;\n\n\t\t\t}\n\n\t\t\tmid = Math.floor( ( low + high ) / 2 );\n\n\t\t}\n\n\t\treturn mid;\n\n\t}\n\n\n\t/*\n\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tU    : knot vector\n\n\treturns array[p+1] with basis functions values.\n\t*/\n\tstatic calcBasisFunctions( span, u, p, U ) {\n\n\t\tconst N = [];\n\t\tconst left = [];\n\t\tconst right = [];\n\t\tN[ 0 ] = 1.0;\n\n\t\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\tlet saved = 0.0;\n\n\t\t\tfor ( let r = 0; r < j; ++ r ) {\n\n\t\t\t\tconst rv = right[ r + 1 ];\n\t\t\t\tconst lv = left[ j - r ];\n\t\t\t\tconst temp = N[ r ] / ( rv + lv );\n\t\t\t\tN[ r ] = saved + rv * temp;\n\t\t\t\tsaved = lv * temp;\n\n\t\t\t }\n\n\t\t\t N[ j ] = saved;\n\n\t\t }\n\n\t\t return N;\n\n\t}\n\n\n\t/*\n\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\tp : degree of B-Spline\n\tU : knot vector\n\tP : control points (x, y, z, w)\n\tu : parametric point\n\n\treturns point for given u\n\t*/\n\tstatic calcBSplinePoint( p, U, P, u ) {\n\n\t\tconst span = this.findSpan( p, u, U );\n\t\tconst N = this.calcBasisFunctions( span, u, p, U );\n\t\tconst C = new Vector4( 0, 0, 0, 0 );\n\n\t\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\t\tconst point = P[ span - p + j ];\n\t\t\tconst Nj = N[ j ];\n\t\t\tconst wNj = point.w * Nj;\n\t\t\tC.x += point.x * wNj;\n\t\t\tC.y += point.y * wNj;\n\t\t\tC.z += point.z * wNj;\n\t\t\tC.w += point.w * Nj;\n\n\t\t}\n\n\t\treturn C;\n\n\t}\n\n\n\t/*\n\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tn    : number of derivatives to calculate\n\tU    : knot vector\n\n\treturns array[n+1][p+1] with basis functions derivatives\n\t*/\n\tstatic calcBasisFunctionDerivatives( span, u, p, n, U ) {\n\n\t\tconst zeroArr = [];\n\t\tfor ( let i = 0; i <= p; ++ i )\n\t\t\tzeroArr[ i ] = 0.0;\n\n\t\tconst ders = [];\n\n\t\tfor ( let i = 0; i <= n; ++ i )\n\t\t\tders[ i ] = zeroArr.slice( 0 );\n\n\t\tconst ndu = [];\n\n\t\tfor ( let i = 0; i <= p; ++ i )\n\t\t\tndu[ i ] = zeroArr.slice( 0 );\n\n\t\tndu[ 0 ][ 0 ] = 1.0;\n\n\t\tconst left = zeroArr.slice( 0 );\n\t\tconst right = zeroArr.slice( 0 );\n\n\t\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\tlet saved = 0.0;\n\n\t\t\tfor ( let r = 0; r < j; ++ r ) {\n\n\t\t\t\tconst rv = right[ r + 1 ];\n\t\t\t\tconst lv = left[ j - r ];\n\t\t\t\tndu[ j ][ r ] = rv + lv;\n\n\t\t\t\tconst temp = ndu[ r ][ j - 1 ] / ndu[ j ][ r ];\n\t\t\t\tndu[ r ][ j ] = saved + rv * temp;\n\t\t\t\tsaved = lv * temp;\n\n\t\t\t}\n\n\t\t\tndu[ j ][ j ] = saved;\n\n\t\t}\n\n\t\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\t\tders[ 0 ][ j ] = ndu[ j ][ p ];\n\n\t\t}\n\n\t\tfor ( let r = 0; r <= p; ++ r ) {\n\n\t\t\tlet s1 = 0;\n\t\t\tlet s2 = 1;\n\n\t\t\tconst a = [];\n\t\t\tfor ( let i = 0; i <= p; ++ i ) {\n\n\t\t\t\ta[ i ] = zeroArr.slice( 0 );\n\n\t\t\t}\n\n\t\t\ta[ 0 ][ 0 ] = 1.0;\n\n\t\t\tfor ( let k = 1; k <= n; ++ k ) {\n\n\t\t\t\tlet d = 0.0;\n\t\t\t\tconst rk = r - k;\n\t\t\t\tconst pk = p - k;\n\n\t\t\t\tif ( r >= k ) {\n\n\t\t\t\t\ta[ s2 ][ 0 ] = a[ s1 ][ 0 ] / ndu[ pk + 1 ][ rk ];\n\t\t\t\t\td = a[ s2 ][ 0 ] * ndu[ rk ][ pk ];\n\n\t\t\t\t}\n\n\t\t\t\tconst j1 = ( rk >= - 1 ) ? 1 : - rk;\n\t\t\t\tconst j2 = ( r - 1 <= pk ) ? k - 1 : p - r;\n\n\t\t\t\tfor ( let j = j1; j <= j2; ++ j ) {\n\n\t\t\t\t\ta[ s2 ][ j ] = ( a[ s1 ][ j ] - a[ s1 ][ j - 1 ] ) / ndu[ pk + 1 ][ rk + j ];\n\t\t\t\t\td += a[ s2 ][ j ] * ndu[ rk + j ][ pk ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( r <= pk ) {\n\n\t\t\t\t\ta[ s2 ][ k ] = - a[ s1 ][ k - 1 ] / ndu[ pk + 1 ][ r ];\n\t\t\t\t\td += a[ s2 ][ k ] * ndu[ r ][ pk ];\n\n\t\t\t\t}\n\n\t\t\t\tders[ k ][ r ] = d;\n\n\t\t\t\tconst j = s1;\n\t\t\t\ts1 = s2;\n\t\t\t\ts2 = j;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet r = p;\n\n\t\tfor ( let k = 1; k <= n; ++ k ) {\n\n\t\t\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\t\t\tders[ k ][ j ] *= r;\n\n\t\t\t}\n\n\t\t\tr *= p - k;\n\n\t\t}\n\n\t\treturn ders;\n\n\t}\n\n\n\t/*\n\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points\n\t\tu  : Parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array[d+1] with derivatives\n\t\t*/\n\tstatic calcBSplineDerivatives( p, U, P, u, nd ) {\n\n\t\tconst du = nd < p ? nd : p;\n\t\tconst CK = [];\n\t\tconst span = this.findSpan( p, u, U );\n\t\tconst nders = this.calcBasisFunctionDerivatives( span, u, p, du, U );\n\t\tconst Pw = [];\n\n\t\tfor ( let i = 0; i < P.length; ++ i ) {\n\n\t\t\tconst point = P[ i ].clone();\n\t\t\tconst w = point.w;\n\n\t\t\tpoint.x *= w;\n\t\t\tpoint.y *= w;\n\t\t\tpoint.z *= w;\n\n\t\t\tPw[ i ] = point;\n\n\t\t}\n\n\t\tfor ( let k = 0; k <= du; ++ k ) {\n\n\t\t\tconst point = Pw[ span - p ].clone().multiplyScalar( nders[ k ][ 0 ] );\n\n\t\t\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\t\t\tpoint.add( Pw[ span - p + j ].clone().multiplyScalar( nders[ k ][ j ] ) );\n\n\t\t\t}\n\n\t\t\tCK[ k ] = point;\n\n\t\t}\n\n\t\tfor ( let k = du + 1; k <= nd + 1; ++ k ) {\n\n\t\t\tCK[ k ] = new Vector4( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn CK;\n\n\t}\n\n\n\t/*\n\tCalculate \"K over I\"\n\n\treturns k!/(i!(k-i)!)\n\t*/\n\tstatic calcKoverI( k, i ) {\n\n\t\tlet nom = 1;\n\n\t\tfor ( let j = 2; j <= k; ++ j ) {\n\n\t\t\tnom *= j;\n\n\t\t}\n\n\t\tlet denom = 1;\n\n\t\tfor ( let j = 2; j <= i; ++ j ) {\n\n\t\t\tdenom *= j;\n\n\t\t}\n\n\t\tfor ( let j = 2; j <= k - i; ++ j ) {\n\n\t\t\tdenom *= j;\n\n\t\t}\n\n\t\treturn nom / denom;\n\n\t}\n\n\n\t/*\n\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\tPders : result of function calcBSplineDerivatives\n\n\treturns array with derivatives for rational curve.\n\t*/\n\tstatic calcRationalCurveDerivatives( Pders ) {\n\n\t\tconst nd = Pders.length;\n\t\tconst Aders = [];\n\t\tconst wders = [];\n\n\t\tfor ( let i = 0; i < nd; ++ i ) {\n\n\t\t\tconst point = Pders[ i ];\n\t\t\tAders[ i ] = new Vector3( point.x, point.y, point.z );\n\t\t\twders[ i ] = point.w;\n\n\t\t}\n\n\t\tconst CK = [];\n\n\t\tfor ( let k = 0; k < nd; ++ k ) {\n\n\t\t\tconst v = Aders[ k ].clone();\n\n\t\t\tfor ( let i = 1; i <= k; ++ i ) {\n\n\t\t\t\tv.sub( CK[ k - i ].clone().multiplyScalar( this.calcKoverI( k, i ) * wders[ i ] ) );\n\n\t\t\t}\n\n\t\t\tCK[ k ] = v.divideScalar( wders[ 0 ] );\n\n\t\t}\n\n\t\treturn CK;\n\n\t}\n\n\n\t/*\n\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points in homogeneous space\n\tu  : parametric points\n\tnd : number of derivatives\n\n\treturns array with derivatives.\n\t*/\n\tstatic calcNURBSDerivatives( p, U, P, u, nd ) {\n\n\t\tconst Pders = this.calcBSplineDerivatives( p, U, P, u, nd );\n\t\treturn this.calcRationalCurveDerivatives( Pders );\n\n\t}\n\n\n\t/*\n\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\tp1, p2 : degrees of B-Spline surface\n\tU1, U2 : knot vectors\n\tP      : control points (x, y, z, w)\n\tu, v   : parametric values\n\n\treturns point for given (u, v)\n\t*/\n\tstatic calcSurfacePoint( p, q, U, V, P, u, v, target ) {\n\n\t\tconst uspan = this.findSpan( p, u, U );\n\t\tconst vspan = this.findSpan( q, v, V );\n\t\tconst Nu = this.calcBasisFunctions( uspan, u, p, U );\n\t\tconst Nv = this.calcBasisFunctions( vspan, v, q, V );\n\t\tconst temp = [];\n\n\t\tfor ( let l = 0; l <= q; ++ l ) {\n\n\t\t\ttemp[ l ] = new Vector4( 0, 0, 0, 0 );\n\t\t\tfor ( let k = 0; k <= p; ++ k ) {\n\n\t\t\t\tconst point = P[ uspan - p + k ][ vspan - q + l ].clone();\n\t\t\t\tconst w = point.w;\n\t\t\t\tpoint.x *= w;\n\t\t\t\tpoint.y *= w;\n\t\t\t\tpoint.z *= w;\n\t\t\t\ttemp[ l ].add( point.multiplyScalar( Nu[ k ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst Sw = new Vector4( 0, 0, 0, 0 );\n\t\tfor ( let l = 0; l <= q; ++ l ) {\n\n\t\t\tSw.add( temp[ l ].multiplyScalar( Nv[ l ] ) );\n\n\t\t}\n\n\t\tSw.divideScalar( Sw.w );\n\t\ttarget.set( Sw.x, Sw.y, Sw.z );\n\n\t}\n\n}\n\nexport { NURBSUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}