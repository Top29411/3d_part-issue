{"ast":null,"code":"import _classCallCheck from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Color, DefaultLoadingManager, FileLoader, FrontSide, Loader, LoaderUtils, MeshPhongMaterial, RepeatWrapping, TextureLoader, Vector2, sRGBEncoding } from 'three';\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nvar MTLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(MTLLoader, _Loader);\n\n  var _super = _createSuper(MTLLoader);\n\n  function MTLLoader(manager) {\n    _classCallCheck(this, MTLLoader);\n\n    return _super.call(this, manager);\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n\n\n  _createClass(MTLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"setMaterialOptions\",\n    value: function setMaterialOptions(value) {\n      this.materialOptions = value;\n      return this;\n    }\n    /**\n     * Parses a MTL file.\n     *\n     * @param {String} text - Content of MTL file\n     * @return {MaterialCreator}\n     *\n     * @see setPath setResourcePath\n     *\n     * @note In order for relative texture references to resolve correctly\n     * you must call setResourcePath() explicitly prior to parse.\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(text, path) {\n      var lines = text.split('\\n');\n      var info = {};\n      var delimiter_pattern = /\\s+/;\n      var materialsInfo = {};\n\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        line = line.trim();\n\n        if (line.length === 0 || line.charAt(0) === '#') {\n          // Blank line or comment ignore\n          continue;\n        }\n\n        var pos = line.indexOf(' ');\n        var key = pos >= 0 ? line.substring(0, pos) : line;\n        key = key.toLowerCase();\n        var value = pos >= 0 ? line.substring(pos + 1) : '';\n        value = value.trim();\n\n        if (key === 'newmtl') {\n          // New material\n          info = {\n            name: value\n          };\n          materialsInfo[value] = info;\n        } else {\n          if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n            var ss = value.split(delimiter_pattern, 3);\n            info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n          } else {\n            info[key] = value;\n          }\n        }\n      }\n\n      var materialCreator = new MaterialCreator(this.resourcePath || path, this.materialOptions);\n      materialCreator.setCrossOrigin(this.crossOrigin);\n      materialCreator.setManager(this.manager);\n      materialCreator.setMaterials(materialsInfo);\n      return materialCreator;\n    }\n  }]);\n\n  return MTLLoader;\n}(Loader);\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\n\nvar MaterialCreator = /*#__PURE__*/function () {\n  function MaterialCreator() {\n    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, MaterialCreator);\n\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.crossOrigin = 'anonymous';\n    this.side = this.options.side !== undefined ? this.options.side : FrontSide;\n    this.wrap = this.options.wrap !== undefined ? this.options.wrap : RepeatWrapping;\n  }\n\n  _createClass(MaterialCreator, [{\n    key: \"setCrossOrigin\",\n    value: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n      return this;\n    }\n  }, {\n    key: \"setManager\",\n    value: function setManager(value) {\n      this.manager = value;\n    }\n  }, {\n    key: \"setMaterials\",\n    value: function setMaterials(materialsInfo) {\n      this.materialsInfo = this.convert(materialsInfo);\n      this.materials = {};\n      this.materialsArray = [];\n      this.nameLookup = {};\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(materialsInfo) {\n      if (!this.options) return materialsInfo;\n      var converted = {};\n\n      for (var mn in materialsInfo) {\n        // Convert materials info into normalized form based on options\n        var mat = materialsInfo[mn];\n        var covmat = {};\n        converted[mn] = covmat;\n\n        for (var prop in mat) {\n          var save = true;\n          var value = mat[prop];\n          var lprop = prop.toLowerCase();\n\n          switch (lprop) {\n            case 'kd':\n            case 'ka':\n            case 'ks':\n              // Diffuse color (color under white light) using RGB values\n              if (this.options && this.options.normalizeRGB) {\n                value = [value[0] / 255, value[1] / 255, value[2] / 255];\n              }\n\n              if (this.options && this.options.ignoreZeroRGBs) {\n                if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                  // ignore\n                  save = false;\n                }\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          if (save) {\n            covmat[lprop] = value;\n          }\n        }\n      }\n\n      return converted;\n    }\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      for (var mn in this.materialsInfo) {\n        this.create(mn);\n      }\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(materialName) {\n      return this.nameLookup[materialName];\n    }\n  }, {\n    key: \"getAsArray\",\n    value: function getAsArray() {\n      var index = 0;\n\n      for (var mn in this.materialsInfo) {\n        this.materialsArray[index] = this.create(mn);\n        this.nameLookup[mn] = index;\n        index++;\n      }\n\n      return this.materialsArray;\n    }\n  }, {\n    key: \"create\",\n    value: function create(materialName) {\n      if (this.materials[materialName] === undefined) {\n        this.createMaterial_(materialName);\n      }\n\n      return this.materials[materialName];\n    }\n  }, {\n    key: \"createMaterial_\",\n    value: function createMaterial_(materialName) {\n      // Create material\n      var scope = this;\n      var mat = this.materialsInfo[materialName];\n      var params = {\n        name: materialName,\n        side: this.side\n      };\n\n      function resolveURL(baseUrl, url) {\n        if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n        if (/^https?:\\/\\//i.test(url)) return url;\n        return baseUrl + url;\n      }\n\n      function setMapForType(mapType, value) {\n        if (params[mapType]) return; // Keep the first encountered texture\n\n        var texParams = scope.getTextureParams(value, params);\n        var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n        map.repeat.copy(texParams.scale);\n        map.offset.copy(texParams.offset);\n        map.wrapS = scope.wrap;\n        map.wrapT = scope.wrap;\n\n        if (mapType === 'map' || mapType === 'emissiveMap') {\n          map.encoding = sRGBEncoding;\n        }\n\n        params[mapType] = map;\n      }\n\n      for (var prop in mat) {\n        var value = mat[prop];\n        var n = void 0;\n        if (value === '') continue;\n\n        switch (prop.toLowerCase()) {\n          // Ns is material specular exponent\n          case 'kd':\n            // Diffuse color (color under white light) using RGB values\n            params.color = new Color().fromArray(value).convertSRGBToLinear();\n            break;\n\n          case 'ks':\n            // Specular color (color when light is reflected from shiny surface) using RGB values\n            params.specular = new Color().fromArray(value).convertSRGBToLinear();\n            break;\n\n          case 'ke':\n            // Emissive using RGB values\n            params.emissive = new Color().fromArray(value).convertSRGBToLinear();\n            break;\n\n          case 'map_kd':\n            // Diffuse texture map\n            setMapForType('map', value);\n            break;\n\n          case 'map_ks':\n            // Specular map\n            setMapForType('specularMap', value);\n            break;\n\n          case 'map_ke':\n            // Emissive map\n            setMapForType('emissiveMap', value);\n            break;\n\n          case 'norm':\n            setMapForType('normalMap', value);\n            break;\n\n          case 'map_bump':\n          case 'bump':\n            // Bump texture map\n            setMapForType('bumpMap', value);\n            break;\n\n          case 'map_d':\n            // Alpha map\n            setMapForType('alphaMap', value);\n            params.transparent = true;\n            break;\n\n          case 'ns':\n            // The specular exponent (defines the focus of the specular highlight)\n            // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n            params.shininess = parseFloat(value);\n            break;\n\n          case 'd':\n            n = parseFloat(value);\n\n            if (n < 1) {\n              params.opacity = n;\n              params.transparent = true;\n            }\n\n            break;\n\n          case 'tr':\n            n = parseFloat(value);\n            if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n            if (n > 0) {\n              params.opacity = 1 - n;\n              params.transparent = true;\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      this.materials[materialName] = new MeshPhongMaterial(params);\n      return this.materials[materialName];\n    }\n  }, {\n    key: \"getTextureParams\",\n    value: function getTextureParams(value, matParams) {\n      var texParams = {\n        scale: new Vector2(1, 1),\n        offset: new Vector2(0, 0)\n      };\n      var items = value.split(/\\s+/);\n      var pos;\n      pos = items.indexOf('-bm');\n\n      if (pos >= 0) {\n        matParams.bumpScale = parseFloat(items[pos + 1]);\n        items.splice(pos, 2);\n      }\n\n      pos = items.indexOf('-s');\n\n      if (pos >= 0) {\n        texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4); // we expect 3 parameters here!\n      }\n\n      pos = items.indexOf('-o');\n\n      if (pos >= 0) {\n        texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4); // we expect 3 parameters here!\n      }\n\n      texParams.url = items.join(' ').trim();\n      return texParams;\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(url, mapping, onLoad, onProgress, onError) {\n      var manager = this.manager !== undefined ? this.manager : DefaultLoadingManager;\n      var loader = manager.getHandler(url);\n\n      if (loader === null) {\n        loader = new TextureLoader(manager);\n      }\n\n      if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n      var texture = loader.load(url, onLoad, onProgress, onError);\n      if (mapping !== undefined) texture.mapping = mapping;\n      return texture;\n    }\n  }]);\n\n  return MaterialCreator;\n}();\n\nexport { MTLLoader };","map":{"version":3,"names":["Color","DefaultLoadingManager","FileLoader","FrontSide","Loader","LoaderUtils","MeshPhongMaterial","RepeatWrapping","TextureLoader","Vector2","sRGBEncoding","MTLLoader","manager","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","undefined","wrap","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","create","materialName","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","encoding","n","color","fromArray","convertSRGBToLinear","specular","emissive","transparent","shininess","opacity","invertTrProperty","matParams","items","bumpScale","splice","set","join","mapping","getHandler","texture"],"sources":["/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/three/examples/jsm/loaders/MTLLoader.js"],"sourcesContent":["import {\n\tColor,\n\tDefaultLoadingManager,\n\tFileLoader,\n\tFrontSide,\n\tLoader,\n\tLoaderUtils,\n\tMeshPhongMaterial,\n\tRepeatWrapping,\n\tTextureLoader,\n\tVector2,\n\tsRGBEncoding\n} from 'three';\n\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nclass MTLLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to load.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tsetMaterialOptions( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {MaterialCreator}\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to parse.\n\t */\n\tparse( text, path ) {\n\n\t\tconst lines = text.split( '\\n' );\n\t\tlet info = {};\n\t\tconst delimiter_pattern = /\\s+/;\n\t\tconst materialsInfo = {};\n\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlet line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst pos = line.indexOf( ' ' );\n\n\t\t\tlet key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tlet value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tconst ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst materialCreator = new MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n}\n\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nclass MaterialCreator {\n\n\tconstructor( baseUrl = '', options = {} ) {\n\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.crossOrigin = 'anonymous';\n\n\t\tthis.side = ( this.options.side !== undefined ) ? this.options.side : FrontSide;\n\t\tthis.wrap = ( this.options.wrap !== undefined ) ? this.options.wrap : RepeatWrapping;\n\n\t}\n\n\tsetCrossOrigin( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t}\n\n\tsetManager( value ) {\n\n\t\tthis.manager = value;\n\n\t}\n\n\tsetMaterials( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t}\n\n\tconvert( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tconst converted = {};\n\n\t\tfor ( const mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tconst mat = materialsInfo[ mn ];\n\n\t\t\tconst covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( const prop in mat ) {\n\n\t\t\t\tlet save = true;\n\t\t\t\tlet value = mat[ prop ];\n\t\t\t\tconst lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t}\n\n\tpreload() {\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t}\n\n\tgetIndex( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t}\n\n\tgetAsArray() {\n\n\t\tlet index = 0;\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t}\n\n\tcreate( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tcreateMaterial_( materialName ) {\n\n\t\t// Create material\n\n\t\tconst scope = this;\n\t\tconst mat = this.materialsInfo[ materialName ];\n\t\tconst params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tconst texParams = scope.getTextureParams( value, params );\n\t\t\tconst map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tif ( mapType === 'map' || mapType === 'emissiveMap' ) {\n\n\t\t\t\tmap.encoding = sRGBEncoding;\n\n\t\t\t}\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( const prop in mat ) {\n\n\t\t\tconst value = mat[ prop ];\n\t\t\tlet n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( 'map', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( 'specularMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( 'emissiveMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( 'normalMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( 'bumpMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( 'alphaMap', value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tgetTextureParams( value, matParams ) {\n\n\t\tconst texParams = {\n\n\t\t\tscale: new Vector2( 1, 1 ),\n\t\t\toffset: new Vector2( 0, 0 )\n\n\t\t };\n\n\t\tconst items = value.split( /\\s+/ );\n\t\tlet pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t}\n\n\tloadTexture( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tconst manager = ( this.manager !== undefined ) ? this.manager : DefaultLoadingManager;\n\t\tlet loader = manager.getHandler( url );\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\n\t\tconst texture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { MTLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}