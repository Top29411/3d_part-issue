{"ast":null,"code":"import _classCallCheck from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { AmbientLight, AnimationClip, Bone, BufferGeometry, ClampToEdgeWrapping, Color, DirectionalLight, EquirectangularReflectionMapping, Euler, FileLoader, Float32BufferAttribute, Group, Line, LineBasicMaterial, Loader, LoaderUtils, MathUtils, Matrix3, Matrix4, Mesh, MeshLambertMaterial, MeshPhongMaterial, NumberKeyframeTrack, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, PropertyBinding, Quaternion, QuaternionKeyframeTrack, RepeatWrapping, Skeleton, SkinnedMesh, SpotLight, Texture, TextureLoader, Uint16BufferAttribute, Vector3, Vector4, VectorKeyframeTrack, sRGBEncoding } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nvar fbxTree;\nvar connections;\nvar sceneGraph;\n\nvar FBXLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(FBXLoader, _Loader);\n\n  var _super = _createSuper(FBXLoader);\n\n  function FBXLoader(manager) {\n    _classCallCheck(this, FBXLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(FBXLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n\n        fbxTree = new TextParser().parse(FBXText);\n      } // console.log( fbxTree );\n\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }]);\n\n  return FBXLoader;\n}(Loader); // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n\nvar FBXTreeParser = /*#__PURE__*/function () {\n  function FBXTreeParser(textureLoader, manager) {\n    _classCallCheck(this, FBXTreeParser);\n\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  _createClass(FBXTreeParser, [{\n    key: \"parse\",\n    value: function parse() {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n\n  }, {\n    key: \"parseConnections\",\n    value: function parseConnections() {\n      var connectionMap = new Map();\n\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n\n      return connectionMap;\n    } // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n\n  }, {\n    key: \"parseImages\",\n    value: function parseImages() {\n      var images = {};\n      var blobs = {};\n\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n\n      for (var _id in images) {\n        var filename = images[_id];\n        if (blobs[filename] !== undefined) images[_id] = blobs[filename];else images[_id] = images[_id].split('\\\\').pop();\n      }\n\n      return images;\n    } // Parse embedded image data in FBXTree.Video.Content\n\n  }, {\n    key: \"parseImage\",\n    value: function parseImage(videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n\n        case 'png':\n          type = 'image/png';\n          break;\n\n        case 'tif':\n          type = 'image/tiff';\n          break;\n\n        case 'tga':\n          if (this.manager.getHandler('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n\n          type = 'image/tga';\n          break;\n\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    } // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n\n  }, {\n    key: \"parseTextures\",\n    value: function parseTextures(images) {\n      var textureMap = new Map();\n\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n\n      return textureMap;\n    } // Parse individual node in FBXTree.Objects.Texture\n\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n\n      if ('Translation' in textureNode) {\n        var _values = textureNode.Translation.value;\n        texture.offset.x = _values[0];\n        texture.offset.y = _values[1];\n      }\n\n      return texture;\n    } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n\n      if (extension === 'tga') {\n        var loader = this.manager.getHandler('.tga');\n\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          loader.setPath(this.textureLoader.path);\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    } // Parse nodes in FBXTree.Objects.Material\n\n  }, {\n    key: \"parseMaterials\",\n    value: function parseMaterials(textureMap) {\n      var materialMap = new Map();\n\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n\n      return materialMap;\n    } // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    } // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n\n  }, {\n    key: \"parseParameters\",\n    value: function parseParameters(materialNode, textureMap, ID) {\n      var parameters = {};\n\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = scope.getTexture(textureMap, child.ID);\n\n            if (parameters.map !== undefined) {\n              parameters.map.encoding = sRGBEncoding;\n            }\n\n            break;\n\n          case 'DisplacementColor':\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'EmissiveColor':\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n\n            if (parameters.emissiveMap !== undefined) {\n              parameters.emissiveMap.encoding = sRGBEncoding;\n            }\n\n            break;\n\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'ReflectionColor':\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n\n            if (parameters.envMap !== undefined) {\n              parameters.envMap.mapping = EquirectangularReflectionMapping;\n              parameters.envMap.encoding = sRGBEncoding;\n            }\n\n            break;\n\n          case 'SpecularColor':\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n\n            if (parameters.specularMap !== undefined) {\n              parameters.specularMap.encoding = sRGBEncoding;\n            }\n\n            break;\n\n          case 'TransparentColor':\n          case 'TransparencyFactor':\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    } // get a texture from the textureMap for use by a material.\n\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n\n      return textureMap.get(id);\n    } // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n  }, {\n    key: \"parseDeformers\",\n    value: function parseDeformers() {\n      var skeletons = {};\n      var morphTargets = {};\n\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    } // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n\n  }, {\n    key: \"parseSkeleton\",\n    value: function parseSkeleton(relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n\n        };\n\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n  }, {\n    key: \"parseMorphTargets\",\n    value: function parseMorphTargets(relationships, deformerNodes) {\n      var rawMorphTargets = [];\n\n      for (var i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n\n      return rawMorphTargets;\n    } // create the main Group() to be returned by the loader\n\n  }, {\n    key: \"parseScene\",\n    value: function parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n\n      sceneGraph.animations = animations;\n    } // parse nodes in FBXTree.Objects.Model\n\n  }, {\n    key: \"parseModels\",\n    value: function parseModels(skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n\n            case 'LimbNode':\n            case 'Root':\n              model = new Bone();\n              break;\n\n            case 'Null':\n            default:\n              model = new Group();\n              break;\n          }\n\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n          model.ID = id;\n        }\n\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n\n      return modelMap;\n    }\n  }, {\n    key: \"buildSkeleton\",\n    value: function buildSkeleton(relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        var _loop = function _loop(ID) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        };\n\n        for (var ID in skeletons) {\n          _loop(ID);\n        }\n      });\n      return bone;\n    } // create a PerspectiveCamera or OrthographicCamera\n\n  }, {\n    key: \"createCamera\",\n    value: function createCamera(relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n\n      if (cameraAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n\n        var nearClippingPlane = 1;\n\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n\n        var farClippingPlane = 1000;\n\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n\n        var aspect = width / height;\n        var fov = 45;\n\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n\n          case 1:\n            // Orthographic\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new Object3D();\n            break;\n        }\n      }\n\n      return model;\n    } // Create a DirectionalLight, PointLight or SpotLight\n\n  }, {\n    key: \"createLight\",\n    value: function createLight(relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n\n      if (lightAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n\n        var color = 0xffffff;\n\n        if (lightAttribute.Color !== undefined) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n\n        var distance = 0;\n\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n        var decay = 1;\n\n        switch (type) {\n          case 0:\n            // Point\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n\n          case 1:\n            // Directional\n            model = new DirectionalLight(color, intensity);\n            break;\n\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n\n            var penumbra = 0;\n\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n            model = new PointLight(color, intensity);\n            break;\n        }\n\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n\n      return model;\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = true;\n        });\n      }\n\n      if (geometry.FBX_Deformer) {\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n\n      return model;\n    }\n  }, {\n    key: \"createCurve\",\n    value: function createCurve(relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      var material = new LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    } // parse the model node for transform data\n\n  }, {\n    key: \"getTransformData\",\n    value: function getTransformData(model, modelNode) {\n      var transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    }\n  }, {\n    key: \"setLookAtProperties\",\n    value: function setLookAtProperties(model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"bindSkeleton\",\n    value: function bindSkeleton(skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n\n      var _loop2 = function _loop2(ID) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      };\n\n      for (var ID in skeletons) {\n        _loop2(ID);\n      }\n    }\n  }, {\n    key: \"parsePoseNodes\",\n    value: function parsePoseNodes() {\n      var bindMatrices = {};\n\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n\n      return bindMatrices;\n    } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n  }, {\n    key: \"createAmbientLight\",\n    value: function createAmbientLight() {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    }\n  }]);\n\n  return FBXTreeParser;\n}(); // parse Geometry data from FBXTree and return map of BufferGeometries\n\n\nvar GeometryParser = /*#__PURE__*/function () {\n  function GeometryParser() {\n    _classCallCheck(this, GeometryParser);\n  }\n\n  _createClass(GeometryParser, [{\n    key: \"parse\",\n    value: // Parse nodes in FBXTree.Objects.Geometry\n    function parse(deformers) {\n      var geometryMap = new Map();\n\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n\n      return geometryMap;\n    } // Parse single node in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"parseGeometry\",\n    value: function parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n          break;\n\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n          break;\n      }\n    } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"parseMeshGeometry\",\n    value: function parseMeshGeometry(relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== undefined) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      }); // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"genGeometry\",\n    value: function genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute('position', positionAttribute);\n\n      if (buffers.colors.length > 0) {\n        geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n      }\n\n      if (skeleton) {\n        geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute('normal', normalAttribute);\n      }\n\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    }\n  }, {\n    key: \"parseGeoNode\",\n    value: function parseGeoNode(geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n\n          i++;\n        }\n      }\n\n      geoInfo.weightTable = {};\n\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n\n      return geoInfo;\n    }\n  }, {\n    key: \"genBuffers\",\n    value: function genBuffers(geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false; // these will hold data for a single face\n\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var materialIndex;\n        var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n\n        if (geoInfo.normal) {\n          var _data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n\n          faceNormals.push(_data[0], _data[1], _data[2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n\n        faceLength++;\n\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n  }, {\n    key: \"genFace\",\n    value: function genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      var _loop3 = function _loop3(i) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      };\n\n      for (var i = 2; i < faceLength; i++) {\n        _loop3(i);\n      }\n    }\n  }, {\n    key: \"addMorphTargets\",\n    value: function addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n          if (morphGeoNode !== undefined) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    } // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n\n  }, {\n    key: \"genMorphGeometry\",\n    value: function genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      } // TODO: add morph normal support\n\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n  }, {\n    key: \"parseNormals\",\n    value: function parseNormals(NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n  }, {\n    key: \"parseUVs\",\n    value: function parseUVs(UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n  }, {\n    key: \"parseVertexColors\",\n    value: function parseVertexColors(ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n  }, {\n    key: \"parseMaterialIndices\",\n    value: function parseMaterialIndices(MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n\n      var materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      var materialIndices = [];\n\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"parseNurbsGeometry\",\n    value: function parseNurbsGeometry(geoNode) {\n      if (NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new BufferGeometry();\n      }\n\n      var order = parseInt(geoNode.Order);\n\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n\n      var startKnot, endKnot;\n\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n\n        for (var _i = 0; _i < degree; ++_i) {\n          controlPoints.push(controlPoints[_i]);\n        }\n      }\n\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var points = curve.getPoints(controlPoints.length * 12);\n      return new BufferGeometry().setFromPoints(points);\n    }\n  }]);\n\n  return GeometryParser;\n}(); // parse animation data from FBXTree\n\n\nvar AnimationParser = /*#__PURE__*/function () {\n  function AnimationParser() {\n    _classCallCheck(this, AnimationParser);\n  }\n\n  _createClass(AnimationParser, [{\n    key: \"parse\",\n    value: // take raw animation clips and turn them into three.js animation clips\n    function parse() {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n\n      if (rawClips !== undefined) {\n        for (var key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n\n      return animationClips;\n    }\n  }, {\n    key: \"parseClips\",\n    value: function parseClips() {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    } // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n\n  }, {\n    key: \"parseAnimationCurveNodes\",\n    value: function parseAnimationCurveNodes() {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n\n      return curveNodesMap;\n    } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n\n  }, {\n    key: \"parseAnimationCurves\",\n    value: function parseAnimationCurves(curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n  }, {\n    key: \"parseAnimationLayers\",\n    value: function parseAnimationLayers(curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n\n      var _loop4 = function _loop4(nodeID) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n\n                  if (modelID !== undefined) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                    if (rawModel === undefined) {\n                      console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                      return;\n                    }\n\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  var _modelID = connections.get(geoID).parents[0].ID;\n                  var _rawModel = fbxTree.Objects.Model[_modelID];\n                  var _node = {\n                    modelName: _rawModel.attrName ? PropertyBinding.sanitizeNodeName(_rawModel.attrName) : '',\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = _node;\n                }\n\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      };\n\n      for (var nodeID in rawLayers) {\n        _loop4(nodeID);\n      }\n\n      return layersMap;\n    } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n\n  }, {\n    key: \"parseAnimStacks\",\n    value: function parseAnimStacks(layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      var rawClips = {};\n\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n\n      return rawClips;\n    }\n  }, {\n    key: \"addClip\",\n    value: function addClip(rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    }\n  }, {\n    key: \"generateTracks\",\n    value: function generateTracks(rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n\n      return tracks;\n    }\n  }, {\n    key: \"generateVectorTrack\",\n    value: function generateVectorTrack(modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n    }\n  }, {\n    key: \"generateRotationTrack\",\n    value: function generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n\n      return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    }\n  }, {\n    key: \"generateMorphTrack\",\n    value: function generateMorphTrack(rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    } // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n\n  }, {\n    key: \"getTimesForAllAxes\",\n    value: function getTimesForAllAxes(curves) {\n      var times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }); // and remove duplicates\n\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n\n        for (var i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n\n        times = times.slice(0, targetIndex);\n      }\n\n      return times;\n    }\n  }, {\n    key: \"getKeyframeTrackValues\",\n    value: function getKeyframeTrackValues(times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    } // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n\n  }, {\n    key: \"interpolateRotations\",\n    value: function interpolateRotations(curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }]);\n\n  return AnimationParser;\n}(); // parse an FBX file in ASCII format\n\n\nvar TextParser = /*#__PURE__*/function () {\n  function TextParser() {\n    _classCallCheck(this, TextParser);\n  }\n\n  _createClass(TextParser, [{\n    key: \"getPrevNode\",\n    value: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    }\n  }, {\n    key: \"getCurrentProp\",\n    value: function getCurrentProp() {\n      return this.currentProp;\n    }\n  }, {\n    key: \"pushStack\",\n    value: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    }\n  }, {\n    key: \"popStack\",\n    value: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    }\n  }, {\n    key: \"setCurrentProp\",\n    value: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    }\n  }, {\n    key: \"parseNodeBegin\",\n    value: function parseNodeBegin(line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    }\n  }, {\n    key: \"parseNodeAttr\",\n    value: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n\n      var name = '',\n          type = '';\n\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    }\n  }, {\n    key: \"parseNodeProperty\",\n    value: function parseNodeProperty(line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    }\n  }, {\n    key: \"parseNodePropertyContinued\",\n    value: function parseNodePropertyContinued(line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    } // parse \"Property70\"\n\n  }, {\n    key: \"parseNodeSpecialProperty\",\n    value: function parseNodeSpecialProperty(line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n\n      this.getPrevNode()[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }]);\n\n  return TextParser;\n}(); // Parse an FBX file in Binary format\n\n\nvar BinaryParser = /*#__PURE__*/function () {\n  function BinaryParser() {\n    _classCallCheck(this, BinaryParser);\n  }\n\n  _createClass(BinaryParser, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n\n      if (version < 6400) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n      }\n\n      var allNodes = new FBXTree();\n\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n\n      return allNodes;\n    } // Check if reader has reached the end of content.\n\n  }, {\n    key: \"endOfContent\",\n    value: function endOfContent(reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    } // recursively parse nodes until the end of the file is reached\n\n  }, {\n    key: \"parseNode\",\n    value: function parseNode(reader, version) {\n      var node = {}; // The first three data sizes depends on version.\n\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    }\n  }, {\n    key: \"parseSubNode\",\n    value: function parseSubNode(name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n\n        node[innerPropName] = {\n          'type': innerPropType1,\n          'type2': innerPropType2,\n          'flag': innerPropFlag,\n          'value': innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    }\n  }, {\n    key: \"parseProperty\",\n    value: function parseProperty(reader) {\n      var type = reader.getString(1);\n      var length;\n\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n\n        case 'D':\n          return reader.getFloat64();\n\n        case 'F':\n          return reader.getFloat32();\n\n        case 'I':\n          return reader.getInt32();\n\n        case 'L':\n          return reader.getInt64();\n\n        case 'R':\n          length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n\n        case 'S':\n          length = reader.getUint32();\n          return reader.getString(length);\n\n        case 'Y':\n          return reader.getInt16();\n\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n\n          if (typeof fflate === 'undefined') {\n            console.error('THREE.FBXLoader: External library fflate.min.js required.');\n          }\n\n          var data = fflate.unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(data.buffer);\n\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n\n          break;\n        // cannot happen but is required by the DeepScan\n\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  }]);\n\n  return BinaryParser;\n}();\n\nvar BinaryReader = /*#__PURE__*/function () {\n  function BinaryReader(buffer, littleEndian) {\n    _classCallCheck(this, BinaryReader);\n\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  _createClass(BinaryReader, [{\n    key: \"getOffset\",\n    value: function getOffset() {\n      return this.offset;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.dv.buffer.byteLength;\n    }\n  }, {\n    key: \"skip\",\n    value: function skip(length) {\n      this.offset += length;\n    } // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    }\n  }, {\n    key: \"getBooleanArray\",\n    value: function getBooleanArray(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getUint8\",\n    value: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n  }, {\n    key: \"getInt16\",\n    value: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    }\n  }, {\n    key: \"getInt32\",\n    value: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getInt32Array\",\n    value: function getInt32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getUint32\",\n    value: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    } // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n\n  }, {\n    key: \"getInt64\",\n    value: function getInt64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n\n      if (high & 0x80000000) {\n        high = ~high & 0xFFFFFFFF;\n        low = ~low & 0xFFFFFFFF;\n        if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n        low = low + 1 & 0xFFFFFFFF;\n        return -(high * 0x100000000 + low);\n      }\n\n      return high * 0x100000000 + low;\n    }\n  }, {\n    key: \"getInt64Array\",\n    value: function getInt64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n\n      return a;\n    } // Note: see getInt64() comment\n\n  }, {\n    key: \"getUint64\",\n    value: function getUint64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      return high * 0x100000000 + low;\n    }\n  }, {\n    key: \"getFloat32\",\n    value: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getFloat32Array\",\n    value: function getFloat32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getFloat64\",\n    value: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    }\n  }, {\n    key: \"getFloat64Array\",\n    value: function getFloat64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getArrayBuffer\",\n    value: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }]);\n\n  return BinaryReader;\n}(); // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\n\nvar FBXTree = /*#__PURE__*/function () {\n  function FBXTree() {\n    _classCallCheck(this, FBXTree);\n  }\n\n  _createClass(FBXTree, [{\n    key: \"add\",\n    value: function add(key, val) {\n      this[key] = val;\n    }\n  }]);\n\n  return FBXTree;\n}(); // ************** UTILITY FUNCTIONS **************\n\n\nfunction isFbxFormatBinary(buffer) {\n  var CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  var cursor = 0;\n\n  function read(offset) {\n    var result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (var i = 0; i < CORRECT.length; ++i) {\n    var num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  var versionRegExp = /FBXVersion: (\\d+)/;\n  var match = text.match(versionRegExp);\n\n  if (match) {\n    var version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\n\nvar dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  var index;\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  var from = index * infoObject.dataSize;\n  var to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nvar tempEuler = new Euler();\nvar tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  var lTranslationM = new Matrix4();\n  var lPreRotationM = new Matrix4();\n  var lRotationM = new Matrix4();\n  var lPostRotationM = new Matrix4();\n  var lScalingM = new Matrix4();\n  var lScalingPivotM = new Matrix4();\n  var lScalingOffsetM = new Matrix4();\n  var lRotationOffsetM = new Matrix4();\n  var lRotationPivotM = new Matrix4();\n  var lParentGX = new Matrix4();\n  var lParentLX = new Matrix4();\n  var lGlobalT = new Matrix4();\n  var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    var array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    var _array = transformData.rotation.map(MathUtils.degToRad);\n\n    _array.push(transformData.eulerOrder);\n\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(_array));\n  }\n\n  if (transformData.postRotation) {\n    var _array2 = transformData.postRotation.map(MathUtils.degToRad);\n\n    _array2.push(transformData.eulerOrder);\n\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(_array2));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  var lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  var lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  var lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  var lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  var lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  var lLSM = lScalingM;\n  var lGlobalRS = new Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    var lParentLSM_inv = lParentLSM.clone().invert();\n    var lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  var lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  var lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\n\n  var lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  var lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  var enums = ['ZYX', // -> XYZ extrinsic\n  'YZX', // -> XZY extrinsic\n  'XZY', // -> YZX extrinsic\n  'ZXY', // -> YXZ extrinsic\n  'YXZ', // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\n\nfunction parseNumberArray(value) {\n  var array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (var i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n} // inject array a2 into array a1 at index\n\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n\nexport { FBXLoader };","map":{"version":3,"names":["AmbientLight","AnimationClip","Bone","BufferGeometry","ClampToEdgeWrapping","Color","DirectionalLight","EquirectangularReflectionMapping","Euler","FileLoader","Float32BufferAttribute","Group","Line","LineBasicMaterial","Loader","LoaderUtils","MathUtils","Matrix3","Matrix4","Mesh","MeshLambertMaterial","MeshPhongMaterial","NumberKeyframeTrack","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","PropertyBinding","Quaternion","QuaternionKeyframeTrack","RepeatWrapping","Skeleton","SkinnedMesh","SpotLight","Texture","TextureLoader","Uint16BufferAttribute","Vector3","Vector4","VectorKeyframeTrack","sRGBEncoding","fflate","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","manager","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","Translation","offset","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","toArray","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","nodeStack","currentIndent","currentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","popStack","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","getCurrentNode","pushStack","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","setCurrentProp","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","getPrevNode","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","unzlibSync","reader2","littleEndian","dv","DataView","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["/Users/pavlomishchenko/Downloads/fbx-app-react-forked/node_modules/three/examples/jsm/loaders/FBXLoader.js"],"sourcesContent":["import {\n\tAmbientLight,\n\tAnimationClip,\n\tBone,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tDirectionalLight,\n\tEquirectangularReflectionMapping,\n\tEuler,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLine,\n\tLineBasicMaterial,\n\tLoader,\n\tLoaderUtils,\n\tMathUtils,\n\tMatrix3,\n\tMatrix4,\n\tMesh,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tNumberKeyframeTrack,\n\tObject3D,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tPropertyBinding,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tTexture,\n\tTextureLoader,\n\tUint16BufferAttribute,\n\tVector3,\n\tVector4,\n\tVectorKeyframeTrack,\n\tsRGBEncoding\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( FBXBuffer, path ) {\n\n\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t} else {\n\n\t\t\tconst FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t}\n\n\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t}\n\n\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t}\n\n\t\t// console.log( fbxTree );\n\n\t\tconst textureLoader = new TextureLoader( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\treturn new FBXTreeParser( textureLoader, this.manager ).parse( fbxTree );\n\n\t}\n\n}\n\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nclass FBXTreeParser {\n\n\tconstructor( textureLoader, manager ) {\n\n\t\tthis.textureLoader = textureLoader;\n\t\tthis.manager = manager;\n\n\t}\n\n\tparse() {\n\n\t\tconnections = this.parseConnections();\n\n\t\tconst images = this.parseImages();\n\t\tconst textures = this.parseTextures( images );\n\t\tconst materials = this.parseMaterials( textures );\n\t\tconst deformers = this.parseDeformers();\n\t\tconst geometryMap = new GeometryParser().parse( deformers );\n\n\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\treturn sceneGraph;\n\n\t}\n\n\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t// and details the connection type\n\tparseConnections() {\n\n\t\tconst connectionMap = new Map();\n\n\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\tconst rawConnections = fbxTree.Connections.connections;\n\n\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\tconst fromID = rawConnection[ 0 ];\n\t\t\t\tconst toID = rawConnection[ 1 ];\n\t\t\t\tconst relationship = rawConnection[ 2 ];\n\n\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn connectionMap;\n\n\t}\n\n\t// Parse FBXTree.Objects.Video for embedded image data\n\t// These images are connected to textures in FBXTree.Objects.Textures\n\t// via FBXTree.Connections.\n\tparseImages() {\n\n\t\tconst images = {};\n\t\tconst blobs = {};\n\n\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\tconst videoNodes = fbxTree.Objects.Video;\n\n\t\t\tfor ( const nodeID in videoNodes ) {\n\n\t\t\t\tconst videoNode = videoNodes[ nodeID ];\n\n\t\t\t\tconst id = parseInt( nodeID );\n\n\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\tconst arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\tconst base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\tconst image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const id in images ) {\n\n\t\t\tconst filename = images[ id ];\n\n\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\t// Parse embedded image data in FBXTree.Video.Content\n\tparseImage( videoNode ) {\n\n\t\tconst content = videoNode.Content;\n\t\tconst fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\tconst extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\tlet type;\n\n\t\tswitch ( extension ) {\n\n\t\t\tcase 'bmp':\n\n\t\t\t\ttype = 'image/bmp';\n\t\t\t\tbreak;\n\n\t\t\tcase 'jpg':\n\t\t\tcase 'jpeg':\n\n\t\t\t\ttype = 'image/jpeg';\n\t\t\t\tbreak;\n\n\t\t\tcase 'png':\n\n\t\t\t\ttype = 'image/png';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tif':\n\n\t\t\t\ttype = 'image/tiff';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tga':\n\n\t\t\t\tif ( this.manager.getHandler( '.tga' ) === null ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );\n\n\t\t\t\t}\n\n\t\t\t\ttype = 'image/tga';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\treturn;\n\n\t\t}\n\n\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t} else { // Binary Format\n\n\t\t\tconst array = new Uint8Array( content );\n\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t}\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Texture\n\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t// to images in FBXTree.Objects.Video\n\tparseTextures( images ) {\n\n\t\tconst textureMap = new Map();\n\n\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\tconst textureNodes = fbxTree.Objects.Texture;\n\t\t\tfor ( const nodeID in textureNodes ) {\n\n\t\t\t\tconst texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textureMap;\n\n\t}\n\n\t// Parse individual node in FBXTree.Objects.Texture\n\tparseTexture( textureNode, images ) {\n\n\t\tconst texture = this.loadTexture( textureNode, images );\n\n\t\ttexture.ID = textureNode.id;\n\n\t\ttexture.name = textureNode.attrName;\n\n\t\tconst wrapModeU = textureNode.WrapModeU;\n\t\tconst wrapModeV = textureNode.WrapModeV;\n\n\t\tconst valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\tconst valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t// 0: repeat(default), 1: clamp\n\n\t\ttexture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\t\ttexture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\tconst values = textureNode.Scaling.value;\n\n\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t}\n\n\t\tif ( 'Translation' in textureNode ) {\n\n\t\t\tconst values = textureNode.Translation.value;\n\n\t\t\ttexture.offset.x = values[ 0 ];\n\t\t\ttexture.offset.y = values[ 1 ];\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\t// load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\tloadTexture( textureNode, images ) {\n\n\t\tlet fileName;\n\n\t\tconst currentPath = this.textureLoader.path;\n\n\t\tconst children = connections.get( textureNode.id ).children;\n\n\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet texture;\n\n\t\tconst extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\tif ( extension === 'tga' ) {\n\n\t\t\tconst loader = this.manager.getHandler( '.tga' );\n\n\t\t\tif ( loader === null ) {\n\n\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\ttexture = new Texture();\n\n\t\t\t} else {\n\n\t\t\t\tloader.setPath( this.textureLoader.path );\n\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t}\n\n\t\t} else if ( extension === 'psd' ) {\n\n\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\ttexture = new Texture();\n\n\t\t} else {\n\n\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t}\n\n\t\tthis.textureLoader.setPath( currentPath );\n\n\t\treturn texture;\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Material\n\tparseMaterials( textureMap ) {\n\n\t\tconst materialMap = new Map();\n\n\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\tconst materialNodes = fbxTree.Objects.Material;\n\n\t\t\tfor ( const nodeID in materialNodes ) {\n\n\t\t\t\tconst material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materialMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Material\n\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t// FBX format currently only supports Lambert and Phong shading models\n\tparseMaterial( materialNode, textureMap ) {\n\n\t\tconst ID = materialNode.id;\n\t\tconst name = materialNode.attrName;\n\t\tlet type = materialNode.ShadingModel;\n\n\t\t// Case where FBX wraps shading model in property object.\n\t\tif ( typeof type === 'object' ) {\n\n\t\t\ttype = type.value;\n\n\t\t}\n\n\t\t// Ignore unused materials which don't have any connections.\n\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\tconst parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\tlet material;\n\n\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\tcase 'phong':\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\t\t\tcase 'lambert':\n\t\t\t\tmaterial = new MeshLambertMaterial();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tmaterial.setValues( parameters );\n\t\tmaterial.name = name;\n\n\t\treturn material;\n\n\t}\n\n\t// Parse FBX material and return parameters suitable for a three.js material\n\t// Also parse the texture map and return any textures associated with the material\n\tparseParameters( materialNode, textureMap, ID ) {\n\n\t\tconst parameters = {};\n\n\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Diffuse ) {\n\n\t\t\tparameters.color = new Color().fromArray( materialNode.Diffuse.value );\n\n\t\t} else if ( materialNode.DiffuseColor && ( materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\tparameters.color = new Color().fromArray( materialNode.DiffuseColor.value );\n\n\t\t}\n\n\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Emissive ) {\n\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.Emissive.value );\n\n\t\t} else if ( materialNode.EmissiveColor && ( materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.EmissiveColor.value );\n\n\t\t}\n\n\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t}\n\n\t\tif ( materialNode.Opacity ) {\n\n\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t}\n\n\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\tparameters.transparent = true;\n\n\t\t}\n\n\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Shininess ) {\n\n\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t}\n\n\t\tif ( materialNode.Specular ) {\n\n\t\t\tparameters.specular = new Color().fromArray( materialNode.Specular.value );\n\n\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\tparameters.specular = new Color().fromArray( materialNode.SpecularColor.value );\n\n\t\t}\n\n\t\tconst scope = this;\n\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\tconst type = child.relationship;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'Bump':\n\t\t\t\t\tparameters.bumpMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Maya|TEX_ao_map':\n\t\t\t\t\tparameters.aoMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DiffuseColor':\n\t\t\t\tcase 'Maya|TEX_color_map':\n\t\t\t\t\tparameters.map = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.map !== undefined ) {\n\n\t\t\t\t\t\tparameters.map.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\tparameters.displacementMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\tparameters.emissiveMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.emissiveMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.emissiveMap.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'NormalMap':\n\t\t\t\tcase 'Maya|TEX_normal_map':\n\t\t\t\t\tparameters.normalMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\tparameters.envMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.envMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.envMap.mapping = EquirectangularReflectionMapping;\n\t\t\t\t\t\tparameters.envMap.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\tparameters.specularMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.specularMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.specularMap.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'TransparentColor':\n\t\t\t\tcase 'TransparencyFactor':\n\t\t\t\t\tparameters.alphaMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientColor':\n\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn parameters;\n\n\t}\n\n\t// get a texture from the textureMap for use by a material.\n\tgetTexture( textureMap, id ) {\n\n\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t}\n\n\t\treturn textureMap.get( id );\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Deformer\n\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\tparseDeformers() {\n\n\t\tconst skeletons = {};\n\t\tconst morphTargets = {};\n\n\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\tconst DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\tfor ( const nodeID in DeformerNodes ) {\n\n\t\t\t\tconst deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\tconst skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\tconst morphTarget = {\n\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t};\n\n\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tskeletons: skeletons,\n\t\t\tmorphTargets: morphTargets,\n\n\t\t};\n\n\t}\n\n\t// Parse single nodes in FBXTree.Objects.Deformer\n\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t// Each skin node represents a skeleton and each cluster node represents a bone\n\tparseSkeleton( relationships, deformerNodes ) {\n\n\t\tconst rawBones = [];\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst boneNode = deformerNodes[ child.ID ];\n\n\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\tconst rawBone = {\n\n\t\t\t\tID: child.ID,\n\t\t\t\tindices: [],\n\t\t\t\tweights: [],\n\t\t\t\ttransformLink: new Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t// transform: new Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t// linkMode: boneNode.Mode,\n\n\t\t\t};\n\n\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t}\n\n\t\t\trawBones.push( rawBone );\n\n\t\t} );\n\n\t\treturn {\n\n\t\t\trawBones: rawBones,\n\t\t\tbones: []\n\n\t\t};\n\n\t}\n\n\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\tparseMorphTargets( relationships, deformerNodes ) {\n\n\t\tconst rawMorphTargets = [];\n\n\t\tfor ( let i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\tconst child = relationships.children[ i ];\n\n\t\t\tconst morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\tconst rawMorphTarget = {\n\n\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\tid: morphTargetNode.id,\n\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t};\n\n\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\trawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {\n\n\t\t\t\treturn child.relationship === undefined;\n\n\t\t\t} )[ 0 ].ID;\n\n\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t}\n\n\t\treturn rawMorphTargets;\n\n\t}\n\n\t// create the main Group() to be returned by the loader\n\tparseScene( deformers, geometryMap, materialMap ) {\n\n\t\tsceneGraph = new Group();\n\n\t\tconst modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tconst scope = this;\n\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\tconst modelNode = modelNodes[ model.ID ];\n\t\t\tscope.setLookAtProperties( model, modelNode );\n\n\t\t\tconst parentConnections = connections.get( model.ID ).parents;\n\n\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\tconst parent = modelMap.get( connection.ID );\n\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t} );\n\n\t\t\tif ( model.parent === null ) {\n\n\t\t\t\tsceneGraph.add( model );\n\n\t\t\t}\n\n\n\t\t} );\n\n\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\tthis.createAmbientLight();\n\n\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\tif ( node.userData.transformData ) {\n\n\t\t\t\tif ( node.parent ) {\n\n\t\t\t\t\tnode.userData.transformData.parentMatrix = node.parent.matrix;\n\t\t\t\t\tnode.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n\n\t\t\t\t}\n\n\t\t\t\tconst transform = generateTransform( node.userData.transformData );\n\n\t\t\t\tnode.applyMatrix4( transform );\n\t\t\t\tnode.updateWorldMatrix();\n\n\t\t\t}\n\n\t\t} );\n\n\t\tconst animations = new AnimationParser().parse();\n\n\t\t// if all the models where already combined in a single group, just return that\n\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t}\n\n\t\tsceneGraph.animations = animations;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.Model\n\tparseModels( skeletons, geometryMap, materialMap ) {\n\n\t\tconst modelMap = new Map();\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tfor ( const nodeID in modelNodes ) {\n\n\t\t\tconst id = parseInt( nodeID );\n\t\t\tconst node = modelNodes[ nodeID ];\n\t\t\tconst relationships = connections.get( id );\n\n\t\t\tlet model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\tif ( ! model ) {\n\n\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LimbNode':\n\t\t\t\t\tcase 'Root':\n\t\t\t\t\t\tmodel = new Bone();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Null':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmodel = new Group();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmodel.name = node.attrName ? PropertyBinding.sanitizeNodeName( node.attrName ) : '';\n\n\t\t\t\tmodel.ID = id;\n\n\t\t\t}\n\n\t\t\tthis.getTransformData( model, node );\n\t\t\tmodelMap.set( id, model );\n\n\t\t}\n\n\t\treturn modelMap;\n\n\t}\n\n\tbuildSkeleton( relationships, skeletons, id, name ) {\n\n\t\tlet bone = null;\n\n\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\tfor ( const ID in skeletons ) {\n\n\t\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\tconst subBone = bone;\n\t\t\t\t\t\tbone = new Bone();\n\n\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n\t\t\t\t\t\tbone.name = name ? PropertyBinding.sanitizeNodeName( name ) : '';\n\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn bone;\n\n\t}\n\n\t// create a PerspectiveCamera or OrthographicCamera\n\tcreateCamera( relationships ) {\n\n\t\tlet model;\n\t\tlet cameraAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tcameraAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type = 0;\n\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\ttype = 1;\n\n\t\t\t}\n\n\t\t\tlet nearClippingPlane = 1;\n\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t}\n\n\t\t\tlet farClippingPlane = 1000;\n\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t}\n\n\n\t\t\tlet width = window.innerWidth;\n\t\t\tlet height = window.innerHeight;\n\n\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t}\n\n\t\t\tconst aspect = width / height;\n\n\t\t\tlet fov = 45;\n\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t}\n\n\t\t\tconst focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Perspective\n\t\t\t\t\tmodel = new PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\tmodel = new OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\tmodel = new Object3D();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\t// Create a DirectionalLight, PointLight or SpotLight\n\tcreateLight( relationships ) {\n\n\t\tlet model;\n\t\tlet lightAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tlightAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( lightAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type;\n\n\t\t\t// LightType can be undefined for Point lights\n\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\ttype = 0;\n\n\t\t\t} else {\n\n\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t}\n\n\t\t\tlet color = 0xffffff;\n\n\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\tcolor = new Color().fromArray( lightAttribute.Color.value );\n\n\t\t\t}\n\n\t\t\tlet intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t// light disabled\n\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\tintensity = 0;\n\n\t\t\t}\n\n\t\t\tlet distance = 0;\n\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\tdistance = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\tconst decay = 1;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Point\n\t\t\t\t\tmodel = new PointLight( color, intensity, distance, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Directional\n\t\t\t\t\tmodel = new DirectionalLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // Spot\n\t\t\t\t\tlet angle = Math.PI / 3;\n\n\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\tangle = MathUtils.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet penumbra = 0;\n\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\tpenumbra = MathUtils.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel = new SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.' );\n\t\t\t\t\tmodel = new PointLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\tmodel.castShadow = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateMesh( relationships, geometryMap, materialMap ) {\n\n\t\tlet model;\n\t\tlet geometry = null;\n\t\tlet material = null;\n\t\tconst materials = [];\n\n\t\t// get geometry and materials(s) from connections\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t}\n\n\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( materials.length > 1 ) {\n\n\t\t\tmaterial = materials;\n\n\t\t} else if ( materials.length > 0 ) {\n\n\t\t\tmaterial = materials[ 0 ];\n\n\t\t} else {\n\n\t\t\tmaterial = new MeshPhongMaterial( { color: 0xcccccc } );\n\t\t\tmaterials.push( material );\n\n\t\t}\n\n\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\tmodel = new SkinnedMesh( geometry, material );\n\t\t\tmodel.normalizeSkinWeights();\n\n\t\t} else {\n\n\t\t\tmodel = new Mesh( geometry, material );\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateCurve( relationships, geometryMap ) {\n\n\t\tconst geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\treturn geo;\n\n\t\t}, null );\n\n\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\tconst material = new LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\n\t\treturn new Line( geometry, material );\n\n\t}\n\n\t// parse the model node for transform data\n\tgetTransformData( model, modelNode ) {\n\n\t\tconst transformData = {};\n\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\telse transformData.eulerOrder = 'ZYX';\n\n\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\n\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\tif ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;\n\t\tif ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;\n\n\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\tif ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;\n\n\t\tmodel.userData.transformData = transformData;\n\n\t}\n\n\tsetLookAtProperties( model, modelNode ) {\n\n\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\tconst children = connections.get( model.ID ).children;\n\n\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\tconst lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\tconst pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\tmodel.lookAt( new Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tbindSkeleton( skeletons, geometryMap, modelMap ) {\n\n\t\tconst bindMatrices = this.parsePoseNodes();\n\n\t\tfor ( const ID in skeletons ) {\n\n\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\tconst parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\tconst geoID = parent.ID;\n\t\t\t\t\tconst geoRelationships = connections.get( geoID );\n\n\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\tconst model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\tmodel.bind( new Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tparsePoseNodes() {\n\n\t\tconst bindMatrices = {};\n\n\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\tconst BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\tfor ( const nodeID in BindPoseNode ) {\n\n\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' && BindPoseNode[ nodeID ].NbPoseNodes > 0 ) {\n\n\t\t\t\t\tconst poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindMatrices;\n\n\t}\n\n\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\tcreateAmbientLight() {\n\n\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\tconst ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\tconst r = ambientColor[ 0 ];\n\t\t\tconst g = ambientColor[ 1 ];\n\t\t\tconst b = ambientColor[ 2 ];\n\n\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\tconst color = new Color( r, g, b );\n\t\t\t\tsceneGraph.add( new AmbientLight( color, 1 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n// parse Geometry data from FBXTree and return map of BufferGeometries\nclass GeometryParser {\n\n\t// Parse nodes in FBXTree.Objects.Geometry\n\tparse( deformers ) {\n\n\t\tconst geometryMap = new Map();\n\n\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\tconst geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\tfor ( const nodeID in geoNodes ) {\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\tconst geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometryMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Geometry\n\tparseGeometry( relationships, geoNode, deformers ) {\n\n\t\tswitch ( geoNode.attrType ) {\n\n\t\t\tcase 'Mesh':\n\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\tbreak;\n\n\t\t\tcase 'NurbsCurve':\n\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\tparseMeshGeometry( relationships, geoNode, deformers ) {\n\n\t\tconst skeletons = deformers.skeletons;\n\t\tconst morphTargets = [];\n\n\t\tconst modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t} );\n\n\t\t// don't create geometry if it is not associated with any models\n\t\tif ( modelNodes.length === 0 ) return;\n\n\t\tconst skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\treturn skeleton;\n\n\t\t}, null );\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( deformers.morphTargets[ child.ID ] !== undefined ) {\n\n\t\t\t\tmorphTargets.push( deformers.morphTargets[ child.ID ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// Assume one model and get the preRotation from that\n\t\t// if there is more than one model associated with the geometry this may cause problems\n\t\tconst modelNode = modelNodes[ 0 ];\n\n\t\tconst transformData = {};\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\tconst transform = generateTransform( transformData );\n\n\t\treturn this.genGeometry( geoNode, skeleton, morphTargets, transform );\n\n\t}\n\n\t// Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\tgenGeometry( geoNode, skeleton, morphTargets, preTransform ) {\n\n\t\tconst geo = new BufferGeometry();\n\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\tconst geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\tconst buffers = this.genBuffers( geoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tgeo.setAttribute( 'position', positionAttribute );\n\n\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\tgeo.setAttribute( 'color', new Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t}\n\n\t\tif ( skeleton ) {\n\n\t\t\tgeo.setAttribute( 'skinIndex', new Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\tgeo.setAttribute( 'skinWeight', new Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t// used later to bind the skeleton to the model\n\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t}\n\n\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( preTransform );\n\n\t\t\tconst normalAttribute = new Float32BufferAttribute( buffers.normal, 3 );\n\t\t\tnormalAttribute.applyNormalMatrix( normalMatrix );\n\n\t\t\tgeo.setAttribute( 'normal', normalAttribute );\n\n\t\t}\n\n\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\n\t\t\tlet name = 'uv' + ( i + 1 ).toString();\n\n\t\t\t// the first uv buffer is just called 'uv'\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tname = 'uv';\n\n\t\t\t}\n\n\t\t\tgeo.setAttribute( name, new Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t} );\n\n\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\tlet prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\tlet startIndex = 0;\n\n\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\tconst lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\tconst lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t// using one of them\n\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addMorphTargets( geo, geoNode, morphTargets, preTransform );\n\n\t\treturn geo;\n\n\t}\n\n\tparseGeoNode( geoNode, skeleton ) {\n\n\t\tconst geoInfo = {};\n\n\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\tgeoInfo.uv = [];\n\n\t\t\tlet i = 0;\n\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\tif ( geoNode.LayerElementUV[ i ].UV ) {\n\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeoInfo.weightTable = {};\n\n\t\tif ( skeleton !== null ) {\n\n\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\tid: i,\n\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn geoInfo;\n\n\t}\n\n\tgenBuffers( geoInfo ) {\n\n\t\tconst buffers = {\n\t\t\tvertex: [],\n\t\t\tnormal: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\t\t\tmaterialIndex: [],\n\t\t\tvertexWeights: [],\n\t\t\tweightsIndices: [],\n\t\t};\n\n\t\tlet polygonIndex = 0;\n\t\tlet faceLength = 0;\n\t\tlet displayedWeightsWarning = false;\n\n\t\t// these will hold data for a single face\n\t\tlet facePositionIndexes = [];\n\t\tlet faceNormals = [];\n\t\tlet faceColors = [];\n\t\tlet faceUVs = [];\n\t\tlet faceWeights = [];\n\t\tlet faceWeightIndices = [];\n\n\t\tconst scope = this;\n\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\tlet materialIndex;\n\t\t\tlet endOfFace = false;\n\n\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t// A cube with quad faces looks like this:\n\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t//  }\n\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\tendOfFace = true;\n\n\t\t\t}\n\n\t\t\tlet weightIndices = [];\n\t\t\tlet weights = [];\n\n\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t} );\n\n\n\t\t\t\t}\n\n\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\tconst Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\tlet currentWeight = weight;\n\t\t\t\t\t\tlet currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\tconst tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\tweights = Weight;\n\n\t\t\t\t}\n\n\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tmaterialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfaceLength ++;\n\n\t\t\tif ( endOfFace ) {\n\n\t\t\t\tscope.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\tpolygonIndex ++;\n\t\t\t\tfaceLength = 0;\n\n\t\t\t\t// reset arrays for the next face\n\t\t\t\tfacePositionIndexes = [];\n\t\t\t\tfaceNormals = [];\n\t\t\t\tfaceColors = [];\n\t\t\t\tfaceUVs = [];\n\t\t\t\tfaceWeights = [];\n\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn buffers;\n\n\t}\n\n\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\tgenFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\tfor ( let i = 2; i < faceLength; i ++ ) {\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\taddMorphTargets( parentGeo, parentGeoNode, morphTargets, preTransform ) {\n\n\t\tif ( morphTargets.length === 0 ) return;\n\n\t\tparentGeo.morphTargetsRelative = true;\n\n\t\tparentGeo.morphAttributes.position = [];\n\t\t// parentGeo.morphAttributes.normal = []; // not implemented\n\n\t\tconst scope = this;\n\t\tmorphTargets.forEach( function ( morphTarget ) {\n\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\tconst morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\tscope.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\tgenMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {\n\n\t\tconst vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\tconst morphPositionsSparse = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\tconst indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\tconst length = parentGeo.attributes.position.count * 3;\n\t\tconst morphPositions = new Float32Array( length );\n\n\t\tfor ( let i = 0; i < indices.length; i ++ ) {\n\n\t\t\tconst morphIndex = indices[ i ] * 3;\n\n\t\t\tmorphPositions[ morphIndex ] = morphPositionsSparse[ i * 3 ];\n\t\t\tmorphPositions[ morphIndex + 1 ] = morphPositionsSparse[ i * 3 + 1 ];\n\t\t\tmorphPositions[ morphIndex + 2 ] = morphPositionsSparse[ i * 3 + 2 ];\n\n\t\t}\n\n\t\t// TODO: add morph normal support\n\t\tconst morphGeoInfo = {\n\t\t\tvertexIndices: vertexIndices,\n\t\t\tvertexPositions: morphPositions,\n\n\t\t};\n\n\t\tconst morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\tpositionAttribute.name = name || morphGeoNode.attrName;\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t}\n\n\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\tparseNormals( NormalNode ) {\n\n\t\tconst mappingType = NormalNode.MappingInformationType;\n\t\tconst referenceType = NormalNode.ReferenceInformationType;\n\t\tconst buffer = NormalNode.Normals.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 3,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\tparseUVs( UVNode ) {\n\n\t\tconst mappingType = UVNode.MappingInformationType;\n\t\tconst referenceType = UVNode.ReferenceInformationType;\n\t\tconst buffer = UVNode.UV.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 2,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\tparseVertexColors( ColorNode ) {\n\n\t\tconst mappingType = ColorNode.MappingInformationType;\n\t\tconst referenceType = ColorNode.ReferenceInformationType;\n\t\tconst buffer = ColorNode.Colors.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 4,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\tparseMaterialIndices( MaterialNode ) {\n\n\t\tconst mappingType = MaterialNode.MappingInformationType;\n\t\tconst referenceType = MaterialNode.ReferenceInformationType;\n\n\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\treturn {\n\t\t\t\tdataSize: 1,\n\t\t\t\tbuffer: [ 0 ],\n\t\t\t\tindices: [ 0 ],\n\t\t\t\tmappingType: 'AllSame',\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t}\n\n\t\tconst materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t// for conforming with the other functions we've written for other data.\n\t\tconst materialIndices = [];\n\n\t\tfor ( let i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\tmaterialIndices.push( i );\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 1,\n\t\t\tbuffer: materialIndexBuffer,\n\t\t\tindices: materialIndices,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\tparseNurbsGeometry( geoNode ) {\n\n\t\tif ( NURBSCurve === undefined ) {\n\n\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\treturn new BufferGeometry();\n\n\t\t}\n\n\t\tconst order = parseInt( geoNode.Order );\n\n\t\tif ( isNaN( order ) ) {\n\n\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\treturn new BufferGeometry();\n\n\t\t}\n\n\t\tconst degree = order - 1;\n\n\t\tconst knots = geoNode.KnotVector.a;\n\t\tconst controlPoints = [];\n\t\tconst pointsValues = geoNode.Points.a;\n\n\t\tfor ( let i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\tcontrolPoints.push( new Vector4().fromArray( pointsValues, i ) );\n\n\t\t}\n\n\t\tlet startKnot, endKnot;\n\n\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\tstartKnot = degree;\n\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\tfor ( let i = 0; i < degree; ++ i ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst curve = new NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\tconst points = curve.getPoints( controlPoints.length * 12 );\n\n\t\treturn new BufferGeometry().setFromPoints( points );\n\n\t}\n\n}\n\n// parse animation data from FBXTree\nclass AnimationParser {\n\n\t// take raw animation clips and turn them into three.js animation clips\n\tparse() {\n\n\t\tconst animationClips = [];\n\n\t\tconst rawClips = this.parseClips();\n\n\t\tif ( rawClips !== undefined ) {\n\n\t\t\tfor ( const key in rawClips ) {\n\n\t\t\t\tconst rawClip = rawClips[ key ];\n\n\t\t\t\tconst clip = this.addClip( rawClip );\n\n\t\t\t\tanimationClips.push( clip );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animationClips;\n\n\t}\n\n\tparseClips() {\n\n\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t// if this is undefined we can safely assume there are no animations\n\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\tconst curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\tconst layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\tconst rawClips = this.parseAnimStacks( layersMap );\n\n\t\treturn rawClips;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t// and is referenced by an AnimationLayer\n\tparseAnimationCurveNodes() {\n\n\t\tconst rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\tconst curveNodesMap = new Map();\n\n\t\tfor ( const nodeID in rawCurveNodes ) {\n\n\t\t\tconst rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\tconst curveNode = {\n\n\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\tcurves: {},\n\n\t\t\t\t};\n\n\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn curveNodesMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t// axis ( e.g. times and values of x rotation)\n\tparseAnimationCurves( curveNodesMap ) {\n\n\t\tconst rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t// clearly, this should be optimised to\n\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\tfor ( const nodeID in rawCurves ) {\n\n\t\t\tconst animationCurve = {\n\n\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t};\n\n\t\t\tconst relationships = connections.get( animationCurve.id );\n\n\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\tconst animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\tconst animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\tparseAnimationLayers( curveNodesMap ) {\n\n\t\tconst rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\tconst layersMap = new Map();\n\n\t\tfor ( const nodeID in rawLayers ) {\n\n\t\t\tconst layerCurveNodes = [];\n\n\t\t\tconst connection = connections.get( parseInt( nodeID ) );\n\n\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\tconst children = connection.children;\n\n\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\tconst curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst modelID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tif ( modelID !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\tif ( rawModel === undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered a unused curve.', child );\n\t\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\n\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( child.ID === rawModel.id ) {\n\n\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\n\n\t\t\t\t\t\t\t\t\t\t\tif ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tif ( ! node.transform ) node.transform = new Matrix4();\n\n\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\tconst geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\tconst modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn layersMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t// hierarchy. Each Stack node will be used to create a AnimationClip\n\tparseAnimStacks( layersMap ) {\n\n\t\tconst rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t// connect the stacks (clips) up to the layers\n\t\tconst rawClips = {};\n\n\t\tfor ( const nodeID in rawStacks ) {\n\n\t\t\tconst children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t}\n\n\t\t\tconst layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\tlayer: layer,\n\n\t\t\t};\n\n\t\t}\n\n\t\treturn rawClips;\n\n\t}\n\n\taddClip( rawClip ) {\n\n\t\tlet tracks = [];\n\n\t\tconst scope = this;\n\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\ttracks = tracks.concat( scope.generateTracks( rawTracks ) );\n\n\t\t} );\n\n\t\treturn new AnimationClip( rawClip.name, - 1, tracks );\n\n\t}\n\n\tgenerateTracks( rawTracks ) {\n\n\t\tconst tracks = [];\n\n\t\tlet initialPosition = new Vector3();\n\t\tlet initialRotation = new Quaternion();\n\t\tlet initialScale = new Vector3();\n\n\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\n\n\t\tinitialPosition = initialPosition.toArray();\n\t\tinitialRotation = new Euler().setFromQuaternion( initialRotation, rawTracks.eulerOrder ).toArray();\n\t\tinitialScale = initialScale.toArray();\n\n\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\tconst positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\tconst rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );\n\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\tconst scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\tconst morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t}\n\n\t\treturn tracks;\n\n\t}\n\n\tgenerateVectorTrack( modelName, curves, initialValue, type ) {\n\n\t\tconst times = this.getTimesForAllAxes( curves );\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\treturn new VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t}\n\n\tgenerateRotationTrack( modelName, curves, initialValue, preRotation, postRotation, eulerOrder ) {\n\n\t\tif ( curves.x !== undefined ) {\n\n\t\t\tthis.interpolateRotations( curves.x );\n\t\t\tcurves.x.values = curves.x.values.map( MathUtils.degToRad );\n\n\t\t}\n\n\t\tif ( curves.y !== undefined ) {\n\n\t\t\tthis.interpolateRotations( curves.y );\n\t\t\tcurves.y.values = curves.y.values.map( MathUtils.degToRad );\n\n\t\t}\n\n\t\tif ( curves.z !== undefined ) {\n\n\t\t\tthis.interpolateRotations( curves.z );\n\t\t\tcurves.z.values = curves.z.values.map( MathUtils.degToRad );\n\n\t\t}\n\n\t\tconst times = this.getTimesForAllAxes( curves );\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\tif ( preRotation !== undefined ) {\n\n\t\t\tpreRotation = preRotation.map( MathUtils.degToRad );\n\t\t\tpreRotation.push( eulerOrder );\n\n\t\t\tpreRotation = new Euler().fromArray( preRotation );\n\t\t\tpreRotation = new Quaternion().setFromEuler( preRotation );\n\n\t\t}\n\n\t\tif ( postRotation !== undefined ) {\n\n\t\t\tpostRotation = postRotation.map( MathUtils.degToRad );\n\t\t\tpostRotation.push( eulerOrder );\n\n\t\t\tpostRotation = new Euler().fromArray( postRotation );\n\t\t\tpostRotation = new Quaternion().setFromEuler( postRotation ).invert();\n\n\t\t}\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst euler = new Euler();\n\n\t\tconst quaternionValues = [];\n\n\t\tfor ( let i = 0; i < values.length; i += 3 ) {\n\n\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );\n\n\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\tif ( preRotation !== undefined ) quaternion.premultiply( preRotation );\n\t\t\tif ( postRotation !== undefined ) quaternion.multiply( postRotation );\n\n\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t}\n\n\t\treturn new QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t}\n\n\tgenerateMorphTrack( rawTracks ) {\n\n\t\tconst curves = rawTracks.DeformPercent.curves.morph;\n\t\tconst values = curves.values.map( function ( val ) {\n\n\t\t\treturn val / 100;\n\n\t\t} );\n\n\t\tconst morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\treturn new NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t}\n\n\t// For all animated objects, times are defined separately for each axis\n\t// Here we'll combine the times into one sorted array without duplicates\n\tgetTimesForAllAxes( curves ) {\n\n\t\tlet times = [];\n\n\t\t// first join together the times for each axis, if defined\n\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t// then sort them\n\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\treturn a - b;\n\n\t\t} );\n\n\t\t// and remove duplicates\n\t\tif ( times.length > 1 ) {\n\n\t\t\tlet targetIndex = 1;\n\t\t\tlet lastValue = times[ 0 ];\n\t\t\tfor ( let i = 1; i < times.length; i ++ ) {\n\n\t\t\t\tconst currentValue = times[ i ];\n\t\t\t\tif ( currentValue !== lastValue ) {\n\n\t\t\t\t\ttimes[ targetIndex ] = currentValue;\n\t\t\t\t\tlastValue = currentValue;\n\t\t\t\t\ttargetIndex ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttimes = times.slice( 0, targetIndex );\n\n\t\t}\n\n\t\treturn times;\n\n\t}\n\n\tgetKeyframeTrackValues( times, curves, initialValue ) {\n\n\t\tconst prevValue = initialValue;\n\n\t\tconst values = [];\n\n\t\tlet xIndex = - 1;\n\t\tlet yIndex = - 1;\n\t\tlet zIndex = - 1;\n\n\t\ttimes.forEach( function ( time ) {\n\n\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t// if there is an x value defined for this frame, use that\n\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\tconst xValue = curves.x.values[ xIndex ];\n\t\t\t\tvalues.push( xValue );\n\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\tconst yValue = curves.y.values[ yIndex ];\n\t\t\t\tvalues.push( yValue );\n\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t}\n\n\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\tconst zValue = curves.z.values[ zIndex ];\n\t\t\t\tvalues.push( zValue );\n\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn values;\n\n\t}\n\n\t// Rotations are defined as Euler angles which can have values  of any size\n\t// These will be converted to quaternions which don't support values greater than\n\t// PI, so we'll interpolate large rotations\n\tinterpolateRotations( curve ) {\n\n\t\tfor ( let i = 1; i < curve.values.length; i ++ ) {\n\n\t\t\tconst initialValue = curve.values[ i - 1 ];\n\t\t\tconst valuesSpan = curve.values[ i ] - initialValue;\n\n\t\t\tconst absoluteSpan = Math.abs( valuesSpan );\n\n\t\t\tif ( absoluteSpan >= 180 ) {\n\n\t\t\t\tconst numSubIntervals = absoluteSpan / 180;\n\n\t\t\t\tconst step = valuesSpan / numSubIntervals;\n\t\t\t\tlet nextValue = initialValue + step;\n\n\t\t\t\tconst initialTime = curve.times[ i - 1 ];\n\t\t\t\tconst timeSpan = curve.times[ i ] - initialTime;\n\t\t\t\tconst interval = timeSpan / numSubIntervals;\n\t\t\t\tlet nextTime = initialTime + interval;\n\n\t\t\t\tconst interpolatedTimes = [];\n\t\t\t\tconst interpolatedValues = [];\n\n\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\n\n\t\t\t\t\tinterpolatedTimes.push( nextTime );\n\t\t\t\t\tnextTime += interval;\n\n\t\t\t\t\tinterpolatedValues.push( nextValue );\n\t\t\t\t\tnextValue += step;\n\n\t\t\t\t}\n\n\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\n\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n// parse an FBX file in ASCII format\nclass TextParser {\n\n\tgetPrevNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t}\n\n\tgetCurrentNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t}\n\n\tgetCurrentProp() {\n\n\t\treturn this.currentProp;\n\n\t}\n\n\tpushStack( node ) {\n\n\t\tthis.nodeStack.push( node );\n\t\tthis.currentIndent += 1;\n\n\t}\n\n\tpopStack() {\n\n\t\tthis.nodeStack.pop();\n\t\tthis.currentIndent -= 1;\n\n\t}\n\n\tsetCurrentProp( val, name ) {\n\n\t\tthis.currentProp = val;\n\t\tthis.currentPropName = name;\n\n\t}\n\n\tparse( text ) {\n\n\t\tthis.currentIndent = 0;\n\n\t\tthis.allNodes = new FBXTree();\n\t\tthis.nodeStack = [];\n\t\tthis.currentProp = [];\n\t\tthis.currentPropName = '';\n\n\t\tconst scope = this;\n\n\t\tconst split = text.split( /[\\r\\n]+/ );\n\n\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\tconst matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\tconst matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\tconst matchBeginning = line.match( '^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\tconst matchProperty = line.match( '^\\\\t{' + ( scope.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\tconst matchEnd = line.match( '^\\\\t{' + ( scope.currentIndent - 1 ) + '}}' );\n\n\t\t\tif ( matchBeginning ) {\n\n\t\t\t\tscope.parseNodeBegin( line, matchBeginning );\n\n\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\tscope.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\tscope.popStack();\n\n\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\tscope.parseNodePropertyContinued( line );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this.allNodes;\n\n\t}\n\n\tparseNodeBegin( line, property ) {\n\n\t\tconst nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\tconst nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t} );\n\n\t\tconst node = { name: nodeName };\n\t\tconst attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\t// a top node\n\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t} else { // a subnode\n\n\t\t\t// if the subnode already exists, append it\n\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\tthis.pushStack( node );\n\n\t}\n\n\tparseNodeAttr( attrs ) {\n\n\t\tlet id = attrs[ 0 ];\n\n\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet name = '', type = '';\n\n\t\tif ( attrs.length > 1 ) {\n\n\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\ttype = attrs[ 2 ];\n\n\t\t}\n\n\t\treturn { id: id, name: name, type: type };\n\n\t}\n\n\tparseNodeProperty( line, property, contentLine ) {\n\n\t\tlet propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\tlet propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t//\tContent: ,\n\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t}\n\n\t\tconst currentNode = this.getCurrentNode();\n\t\tconst parentName = currentNode.name;\n\n\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Connections\n\t\tif ( propName === 'C' ) {\n\n\t\t\tconst connProps = propValue.split( ',' ).slice( 1 );\n\t\t\tconst from = parseInt( connProps[ 0 ] );\n\t\t\tconst to = parseInt( connProps[ 1 ] );\n\n\t\t\tlet rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t} );\n\n\t\t\tpropName = 'connections';\n\t\t\tpropValue = [ from, to ];\n\t\t\tappend( propValue, rest );\n\n\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Node\n\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t// connections\n\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t} else {\n\n\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\telse currentNode.a = propValue;\n\n\t\t}\n\n\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t}\n\n\t}\n\n\tparseNodePropertyContinued( line ) {\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\tcurrentNode.a += line;\n\n\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t// so convert the string to an array\n\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t}\n\n\t}\n\n\t// parse \"Property70\"\n\tparseNodeSpecialProperty( line, propName, propValue ) {\n\n\t\t// split this\n\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t// into array like below\n\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\tconst props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t} );\n\n\t\tconst innerPropName = props[ 0 ];\n\t\tconst innerPropType1 = props[ 1 ];\n\t\tconst innerPropType2 = props[ 2 ];\n\t\tconst innerPropFlag = props[ 3 ];\n\t\tlet innerPropValue = props[ 4 ];\n\n\t\t// cast values where needed, otherwise leave as strings\n\t\tswitch ( innerPropType1 ) {\n\n\t\t\tcase 'int':\n\t\t\tcase 'enum':\n\t\t\tcase 'bool':\n\t\t\tcase 'ULongLong':\n\t\t\tcase 'double':\n\t\t\tcase 'Number':\n\t\t\tcase 'FieldOfView':\n\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t\tcase 'Color':\n\t\t\tcase 'ColorRGB':\n\t\t\tcase 'Vector3D':\n\t\t\tcase 'Lcl_Translation':\n\t\t\tcase 'Lcl_Rotation':\n\t\t\tcase 'Lcl_Scaling':\n\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// CAUTION: these props must append to parent's parent\n\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t'type': innerPropType1,\n\t\t\t'type2': innerPropType2,\n\t\t\t'flag': innerPropFlag,\n\t\t\t'value': innerPropValue\n\n\t\t};\n\n\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t}\n\n}\n\n// Parse an FBX file in Binary format\nclass BinaryParser {\n\n\tparse( buffer ) {\n\n\t\tconst reader = new BinaryReader( buffer );\n\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\tconst version = reader.getUint32();\n\n\t\tif ( version < 6400 ) {\n\n\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + version );\n\n\t\t}\n\n\t\tconst allNodes = new FBXTree();\n\n\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\tconst node = this.parseNode( reader, version );\n\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t}\n\n\t\treturn allNodes;\n\n\t}\n\n\t// Check if reader has reached the end of content.\n\tendOfContent( reader ) {\n\n\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t// - 16bytes: magic\n\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t// - 4bytes: magic\n\t\t// - 4bytes: version\n\t\t// - 120bytes: zero\n\t\t// - 16bytes: magic\n\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t} else {\n\n\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t}\n\n\t}\n\n\t// recursively parse nodes until the end of the file is reached\n\tparseNode( reader, version ) {\n\n\t\tconst node = {};\n\n\t\t// The first three data sizes depends on version.\n\t\tconst endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\tconst numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t( version >= 7500 ) ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n\t\tconst nameLen = reader.getUint8();\n\t\tconst name = reader.getString( nameLen );\n\n\t\t// Regards this node as NULL-record if endOffset is zero\n\t\tif ( endOffset === 0 ) return null;\n\n\t\tconst propertyList = [];\n\n\t\tfor ( let i = 0; i < numProperties; i ++ ) {\n\n\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t}\n\n\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\tconst id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\tconst attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\tconst attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t// check if this node represents just a single property\n\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\tconst subNode = this.parseNode( reader, version );\n\n\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t}\n\n\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\tif ( typeof id === 'number' ) node.id = id;\n\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\tif ( name !== '' ) node.name = name;\n\n\t\treturn node;\n\n\t}\n\n\tparseSubNode( name, node, subNode ) {\n\n\t\t// special case: child node is single property\n\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\tconst value = subNode.propertyList[ 0 ];\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\tsubNode.a = value;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t}\n\n\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\tconst array = [];\n\n\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t} );\n\n\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\tnode.connections = [];\n\n\t\t\t}\n\n\t\t\tnode.connections.push( array );\n\n\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\tconst keys = Object.keys( subNode );\n\n\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t} );\n\n\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\tlet innerPropName = subNode.propertyList[ 0 ];\n\t\t\tlet innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\tconst innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\tconst innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\tlet innerPropValue;\n\n\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\tinnerPropValue = [\n\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t}\n\n\t\t\t// this will be copied to parent, see above\n\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t'type': innerPropType1,\n\t\t\t\t'type2': innerPropType2,\n\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t'value': innerPropValue\n\n\t\t\t};\n\n\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t}\n\n\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tparseProperty( reader ) {\n\n\t\tconst type = reader.getString( 1 );\n\t\tlet length;\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 'C':\n\t\t\t\treturn reader.getBoolean();\n\n\t\t\tcase 'D':\n\t\t\t\treturn reader.getFloat64();\n\n\t\t\tcase 'F':\n\t\t\t\treturn reader.getFloat32();\n\n\t\t\tcase 'I':\n\t\t\t\treturn reader.getInt32();\n\n\t\t\tcase 'L':\n\t\t\t\treturn reader.getInt64();\n\n\t\t\tcase 'R':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\tcase 'S':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getString( length );\n\n\t\t\tcase 'Y':\n\t\t\t\treturn reader.getInt16();\n\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\tcase 'd':\n\t\t\tcase 'f':\n\t\t\tcase 'i':\n\t\t\tcase 'l':\n\n\t\t\t\tconst arrayLength = reader.getUint32();\n\t\t\t\tconst encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\tconst compressedLength = reader.getUint32();\n\n\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( typeof fflate === 'undefined' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.FBXLoader: External library fflate.min.js required.' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data = fflate.unzlibSync( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef\n\t\t\t\tconst reader2 = new BinaryReader( data.buffer );\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\tcase 'f':\n\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\tcase 'i':\n\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t}\n\n\t\t\t\tbreak; // cannot happen but is required by the DeepScan\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t}\n\n\t}\n\n}\n\nclass BinaryReader {\n\n\tconstructor( buffer, littleEndian ) {\n\n\t\tthis.dv = new DataView( buffer );\n\t\tthis.offset = 0;\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\n\t}\n\n\tgetOffset() {\n\n\t\treturn this.offset;\n\n\t}\n\n\tsize() {\n\n\t\treturn this.dv.buffer.byteLength;\n\n\t}\n\n\tskip( length ) {\n\n\t\tthis.offset += length;\n\n\t}\n\n\t// seems like true/false representation depends on exporter.\n\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t// then sees LSB.\n\tgetBoolean() {\n\n\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t}\n\n\tgetBooleanArray( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getBoolean() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint8() {\n\n\t\tconst value = this.dv.getUint8( this.offset );\n\t\tthis.offset += 1;\n\t\treturn value;\n\n\t}\n\n\tgetInt16() {\n\n\t\tconst value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\tthis.offset += 2;\n\t\treturn value;\n\n\t}\n\n\tgetInt32() {\n\n\t\tconst value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetInt32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint32() {\n\n\t\tconst value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t// There's a possibility that this method returns wrong value if the value\n\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t// TODO: safely handle 64-bit integer\n\tgetInt64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\t// calculate negative value\n\t\tif ( high & 0x80000000 ) {\n\n\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetInt64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\t// Note: see getInt64() comment\n\tgetUint64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetFloat32() {\n\n\t\tconst value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetFloat32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetFloat64() {\n\n\t\tconst value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\tthis.offset += 8;\n\t\treturn value;\n\n\t}\n\n\tgetFloat64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetArrayBuffer( size ) {\n\n\t\tconst value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\tthis.offset += size;\n\t\treturn value;\n\n\t}\n\n\tgetString( size ) {\n\n\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n\t\tlet a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta[ i ] = this.getUint8();\n\n\t\t}\n\n\t\tconst nullByte = a.indexOf( 0 );\n\t\tif ( nullByte >= 0 ) a = a.slice( 0, nullByte );\n\n\t\treturn LoaderUtils.decodeText( new Uint8Array( a ) );\n\n\t}\n\n}\n\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nclass FBXTree {\n\n\tadd( key, val ) {\n\n\t\tthis[ key ] = val;\n\n\t}\n\n}\n\n// ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary( buffer ) {\n\n\tconst CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n\n\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n}\n\nfunction isFbxFormatASCII( text ) {\n\n\tconst CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\tlet cursor = 0;\n\n\tfunction read( offset ) {\n\n\t\tconst result = text[ offset - 1 ];\n\t\ttext = text.slice( cursor + offset );\n\t\tcursor ++;\n\t\treturn result;\n\n\t}\n\n\tfor ( let i = 0; i < CORRECT.length; ++ i ) {\n\n\t\tconst num = read( 1 );\n\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nfunction getFbxVersion( text ) {\n\n\tconst versionRegExp = /FBXVersion: (\\d+)/;\n\tconst match = text.match( versionRegExp );\n\n\tif ( match ) {\n\n\t\tconst version = parseInt( match[ 1 ] );\n\t\treturn version;\n\n\t}\n\n\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds( time ) {\n\n\treturn time / 46186158000;\n\n}\n\nconst dataArray = [];\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\tlet index;\n\n\tswitch ( infoObject.mappingType ) {\n\n\t\tcase 'ByPolygonVertex' :\n\t\t\tindex = polygonVertexIndex;\n\t\t\tbreak;\n\t\tcase 'ByPolygon' :\n\t\t\tindex = polygonIndex;\n\t\t\tbreak;\n\t\tcase 'ByVertice' :\n\t\t\tindex = vertexIndex;\n\t\t\tbreak;\n\t\tcase 'AllSame' :\n\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t}\n\n\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\tconst from = index * infoObject.dataSize;\n\tconst to = from + infoObject.dataSize;\n\n\treturn slice( dataArray, infoObject.buffer, from, to );\n\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3();\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform( transformData ) {\n\n\tconst lTranslationM = new Matrix4();\n\tconst lPreRotationM = new Matrix4();\n\tconst lRotationM = new Matrix4();\n\tconst lPostRotationM = new Matrix4();\n\n\tconst lScalingM = new Matrix4();\n\tconst lScalingPivotM = new Matrix4();\n\tconst lScalingOffsetM = new Matrix4();\n\tconst lRotationOffsetM = new Matrix4();\n\tconst lRotationPivotM = new Matrix4();\n\n\tconst lParentGX = new Matrix4();\n\tconst lParentLX = new Matrix4();\n\tconst lGlobalT = new Matrix4();\n\n\tconst inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;\n\n\tif ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );\n\n\tif ( transformData.preRotation ) {\n\n\t\tconst array = transformData.preRotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder );\n\t\tlPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.rotation ) {\n\n\t\tconst array = transformData.rotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder );\n\t\tlRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.postRotation ) {\n\n\t\tconst array = transformData.postRotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder );\n\t\tlPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\t\tlPostRotationM.invert();\n\n\t}\n\n\tif ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );\n\n\t// Pivots and offsets\n\tif ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );\n\tif ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );\n\tif ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );\n\tif ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );\n\n\t// parent transform\n\tif ( transformData.parentMatrixWorld ) {\n\n\t\tlParentLX.copy( transformData.parentMatrix );\n\t\tlParentGX.copy( transformData.parentMatrixWorld );\n\n\t}\n\n\tconst lLRM = lPreRotationM.clone().multiply( lRotationM ).multiply( lPostRotationM );\n\t// Global Rotation\n\tconst lParentGRM = new Matrix4();\n\tlParentGRM.extractRotation( lParentGX );\n\n\t// Global Shear*Scaling\n\tconst lParentTM = new Matrix4();\n\tlParentTM.copyPosition( lParentGX );\n\n\tconst lParentGRSM = lParentTM.clone().invert().multiply( lParentGX );\n\tconst lParentGSM = lParentGRM.clone().invert().multiply( lParentGRSM );\n\tconst lLSM = lScalingM;\n\n\tconst lGlobalRS = new Matrix4();\n\n\tif ( inheritType === 0 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );\n\n\t} else if ( inheritType === 1 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );\n\n\t} else {\n\n\t\tconst lParentLSM = new Matrix4().scale( new Vector3().setFromMatrixScale( lParentLX ) );\n\t\tconst lParentLSM_inv = lParentLSM.clone().invert();\n\t\tconst lParentGSM_noLocal = lParentGSM.clone().multiply( lParentLSM_inv );\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );\n\n\t}\n\n\tconst lRotationPivotM_inv = lRotationPivotM.clone().invert();\n\tconst lScalingPivotM_inv = lScalingPivotM.clone().invert();\n\t// Calculate the local transform matrix\n\tlet lTransform = lTranslationM.clone().multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM_inv ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM_inv );\n\n\tconst lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition( lTransform );\n\n\tconst lGlobalTranslation = lParentGX.clone().multiply( lLocalTWithAllPivotAndOffsetInfo );\n\tlGlobalT.copyPosition( lGlobalTranslation );\n\n\tlTransform = lGlobalT.clone().multiply( lGlobalRS );\n\n\t// from global to local\n\tlTransform.premultiply( lParentGX.invert() );\n\n\treturn lTransform;\n\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder( order ) {\n\n\torder = order || 0;\n\n\tconst enums = [\n\t\t'ZYX', // -> XYZ extrinsic\n\t\t'YZX', // -> XZY extrinsic\n\t\t'XZY', // -> YZX extrinsic\n\t\t'ZXY', // -> YXZ extrinsic\n\t\t'YXZ', // -> ZXY extrinsic\n\t\t'XYZ', // -> ZYX extrinsic\n\t\t//'SphericXYZ', // not possible to support\n\t];\n\n\tif ( order === 6 ) {\n\n\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\treturn enums[ 0 ];\n\n\t}\n\n\treturn enums[ order ];\n\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray( value ) {\n\n\tconst array = value.split( ',' ).map( function ( val ) {\n\n\t\treturn parseFloat( val );\n\n\t} );\n\n\treturn array;\n\n}\n\nfunction convertArrayBufferToString( buffer, from, to ) {\n\n\tif ( from === undefined ) from = 0;\n\tif ( to === undefined ) to = buffer.byteLength;\n\n\treturn LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );\n\n}\n\nfunction append( a, b ) {\n\n\tfor ( let i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n}\n\nfunction slice( a, b, from, to ) {\n\n\tfor ( let i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n\treturn a;\n\n}\n\n// inject array a2 into array a1 at index\nfunction inject( a1, index, a2 ) {\n\n\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\n\n}\n\nexport { FBXLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}